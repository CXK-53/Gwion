// coverage for 'polar'. (generated by util/test2.sh)

polar a;

<<<a.mod>>>;
<<<a.phase>>>;
//testing operator for complex and complex
{
	complex	variable1;
	complex	variable2;
	<<< variable1=variable2 >>>;
}

//testing operator for complex and complex
{
	complex	variable1;
	complex	variable2;
	<<< variable1+variable2 >>>;
}

//testing operator for complex and complex
{
	complex	variable1;
	complex	variable2;
	<<< variable1-variable2 >>>;
}

//testing operator for complex and complex
{
	complex	variable1;
	complex	variable2;
	<<< variable1*variable2 >>>;
}

//testing operator for complex and complex
{
	complex	variable1;
	complex	variable2;
	<<< variable1/variable2 >>>;
}

//testing operator for complex and complex
{
	complex	variable1;
	complex	variable2;
	<<< variable1=>variable2 >>>;
}

//testing operator for complex and complex
{
	complex	variable1;
	complex	variable2;
	<<< variable1+=>variable2 >>>;
}

//testing operator for complex and complex
{
	complex	variable1;
	complex	variable2;
	<<< variable1-=>variable2 >>>;
}

//testing operator for complex and complex
{
	complex	variable1;
	complex	variable2;
	<<< variable1*=>variable2 >>>;
}

//testing operator for complex and complex
{
	complex	variable1;
	complex	variable2;
	<<< variable1/=>variable2 >>>;
}

//testing operator for polar and polar
{
	polar	variable1;
	polar	variable2;
	<<< variable1+variable2 >>>;
}

//testing operator for polar and polar
{
	polar	variable1;
	polar	variable2;
	<<< variable1-variable2 >>>;
}

//testing operator for polar and polar
{
	polar	variable1;
	polar	variable2;
	<<< variable1*variable2 >>>;
}

//testing operator for polar and polar
{
	polar	variable1;
	polar	variable2;
	<<< variable1/variable2 >>>;
}

//testing operator for polar and polar
{
	polar	variable1;
	polar	variable2;
	<<< variable1+=>variable2 >>>;
}

//testing operator for polar and polar
{
	polar	variable1;
	polar	variable2;
	<<< variable1-=>variable2 >>>;
}

//testing operator for polar and polar
{
	polar	variable1;
	polar	variable2;
	<<< variable1*=>variable2 >>>;
}

//testing operator for polar and polar
{
	polar	variable1;
	polar	variable2;
	<<< variable1/=>variable2 >>>;
}

