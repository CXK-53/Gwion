  sp_data* sp = vm->[01;31m[Kbbq-[m[K>sp;
    vm->[01;31m[Kbbq-[m[K>in = calloc(sp->nchan, sizeof(SPFLOAT));
           [01;31m[Kbbq-[m[K>in[chan] = ((m_float**)(_in_buf))[chan][i];
    vm->[01;31m[Kbbq-[m[K>in   = calloc(sp->nchan, sizeof(SPFLOAT));
           [01;31m[Kbbq-[m[K>in[chan] = ((m_float*)(in_bufi))[j];
		for(chan = 0; chan < vm->[01;31m[Kbbq-[m[K>sp->nchan; chan++)
alsa.c
  vm->[01;31m[Kbbq-[m[K>in = calloc(vm->[01;31m[Kbbq-[m[K>sp->nchan, sizeof(SPFLOAT));
    vm->[01;31m[Kbbq-[m[K>sp->pos++;
  m_uint timer = (vm->[01;31m[Kbbq-[m[K>sp->sr / 100000);
  vm->[01;31m[Kbbq-[m[K>in = calloc(vm->[01;31m[Kbbq-[m[K>sp->nchan, sizeof(SPFLOAT));
    vm->[01;31m[Kbbq-[m[K>sp->pos++;
dummy.c
	jack_default_audio_sample_t  * in[vm->[01;31m[Kbbq-[m[K>n_in];
	jack_default_audio_sample_t  * out[vm->[01;31m[Kbbq-[m[K>sp->nchan];
	for(chan = 0; chan < vm->[01;31m[Kbbq-[m[K>n_in; chan++)
	for(chan = 0; chan < vm->[01;31m[Kbbq-[m[K>sp->nchan; chan++)
		for(chan = 0; chan < vm->[01;31m[Kbbq-[m[K>n_in; chan++)
			vm->[01;31m[Kbbq-[m[K>in[chan] = in[chan][frame];
		for(chan = 0; chan < vm->[01;31m[Kbbq-[m[K>sp->nchan; chan++)
			out[chan][frame] = vm->[01;31m[Kbbq-[m[K>sp->out[chan];
		vm->[01;31m[Kbbq-[m[K>sp->pos++;
jack.c
		for(j = 0; j < vm->[01;31m[Kbbq-[m[K>n_in; j++)
			vm->[01;31m[Kbbq-[m[K>in[j] = *in++;
		for(j = 0; j < vm->[01;31m[Kbbq-[m[K>sp->nchan; j++)
			*out++ = vm->[01;31m[Kbbq-[m[K>sp->out[j];
		vm->[01;31m[Kbbq-[m[K>sp->pos++;
//	vm->[01;31m[Kbbq-[m[K>in = malloc(sizeof(m_float) * 2);
portaudio.c
	if(spa_open(vm->[01;31m[Kbbq-[m[K>sp, &spa, tmp, SPA_WRITE) == SP_NOT_OK)
		spa_write_buf(vm->[01;31m[Kbbq-[m[K>sp, &spa, vm->[01;31m[Kbbq-[m[K>sp->out, vm->[01;31m[Kbbq-[m[K>sp->nchan);
		vm->[01;31m[Kbbq-[m[K>sp->pos++;
raw.c
      	buf[chan][i] = vm->[01;31m[Kbbq-[m[K>sp->out[chan];
      vm->[01;31m[Kbbq-[m[K>sp->pos++;
sndfile.c
	double* data = vm->[01;31m[Kbbq-[m[K>sp->out;
//				vm->[01;31m[Kbbq-[m[K>in[channel] = *(double*)instream->areas[channel].ptr;
			vm->[01;31m[Kbbq-[m[K>sp->pos++;
//vm->[01;31m[Kbbq-[m[K>in[ch] = *(m_float*)data;
read_sample(areas[ch].ptr, &vm->[01;31m[Kbbq-[m[K>in[ch]);
soundio.c
