@code_type c .c

@title Handle Gwion plugins
@s Overview
This is a simple program, so it's structyre is a very usual one:
---gwplug.c
@{Header files to include}
@{Preprocessor definitions}
@{Global variables}
@{Functions}
@{The main program}
---

the table created by hcreate is of fixed size.
furthermore, hash tables work better when not fully filled.
We'll need to do diferent things while iterating the path.
To ease the process of passing functions as arguments, lets create a type
with the members of a ENTRY structure as argument.
--- Preprocessor definitions
#define SLEN_MAX 128
#define PLUG_MAX 256
typedef void (*Action)(const char*, const void*);
---

To handle [Gwion](https://github.com/fennecdjay/gwion) plugins, we'll need to get the plugin 
path from the `GWPLUG_PATH` environment variable, setting a default one if none found.

Let's now define the `dir` function, which does the action for every matching 
file in the directory
---dir
static void dir(const char* d, const Action a) {
  struct dirent **nl;
  int n = scandir(d, &nl, so_filter, alphasort);
  if(n < 0)
    return;
  while(n--) {
    strncpy(names[n_names], nl[n]->d_name, strlen(nl[n]->d_name) -3);
    a(names[n_names++], d);
    free(nl[n]);
  }
  free(nl);
}
---

We can now create the `loop` function, actually iterating the path and doing 
the attended action
---loop
static inline void loop(const char** l, const Action a) {
  while(*l && l++)
    dir(*(l-1), a);
}
---

--- Header files to include
#include <stdlib.h> // malloc, free, getenv
#include <stdio.h>  // printf
#include <unistd.h> // link, unlink
#include <string.h> // strlen, strcmp
#include <search.h> // hash table
#include <dirent.h> // directory
---


--- Global variables
static char names[PLUG_MAX][SLEN_MAX];
static unsigned int n_names;
---

To do so, we'll need to
  * get `GWPLUG_PATH` environment variables (or a default string)
  * go trough it in reverse order, to fill a hash table.
  * Hash table used will be C's standard, as we'll use <search.h>
    + initialize hash table

@s Functions
---filter
static int so_filter(const struct dirent* dir) {
  return strstr(dir->d_name, ".so") ? 1 : 0;
}
---


---fill table
static inline void fill(const char* name, const void* data) {
  const ENTRY entry = { names[n_names-1] };
  ENTRY* e = hsearch(entry, ENTER);
  e->data = (void*)data;
}
---

---print entries
static inline void print(const char* name, const void* data) {
  printf("\t%s (%s)\n", name, (char*)data);
}
---

We want to **print**
  * in *green* when installing
  * in *yelllow* when uninstalling
  * in *red* when there is an error
---handle entry
static void handle(const ENTRY* e, const char* home) {
  char tgt[strlen(home) + strlen(e->key) + 5];
  sprintf(tgt, "%s/%s.so", home, e->key);
  if(!strcmp(e->data, home)) {
    unlink(tgt);
    printf("\033[33m%s\033[0m\n", (char*)e->key);
  } else {
    char src[strlen(e->key) + strlen(e->data) + 5];
    sprintf(src, "%s/%s.so", (char*)e->data, e->key);
    printf("\033[32m%s\033[0m (from \033[35m%s\033[0m)\n", e->key, (char*)e->data);
    link(src, tgt);
  }
}
---

--- strsplit
static const char** strsplit(const char* s) {
  void* data;
  char* _s = (char*)s;
  const char** ptrs;
  unsigned int sz, n = 1;
  const unsigned int len = strlen(s);

  n = 1;
  while((_s = strstr(_s, ":"))) {
    ++_s;
    ++n;
  }
  sz = (n + 1) * sizeof(char*);
  ptrs = data = malloc(sz + len + 1);
  if(data) {
    *ptrs = s = strcpy((char*)data + sz, s);
    if(n > 1) {
      while((_s = strstr(_s, ":"))) {
        *_s = '\0';
        ++_s;
       *++ptrs = _s;
      }
    }
    *++ptrs = NULL;
  }
  return data;
}
---

--- Functions
@{strsplit}
@{filter}
@{print entries}
@{fill table}
@{dir}
@{loop}
@{handle entry}
@{get home}
@{list}
---

There's is a problem as C does not do bash expansion.
let do it ourselves
**TODO** investigate wordexp

---get home
static inline void get_home(char* c) {
  char* home = getenv("HOME");
  sprintf(c, "%s/%s", home, ".gwplug");
}
---

if there's no argument, we'll print a (hopefully colored) list of installed 
and available plugins
---list
static void list(const char* home, const char** l) {
  printf("\033[0;1minstalled:\n\033[0;32m");
  dir(home, print);
  printf("\033[0;1mavailable:\n\033[0;33m");
  loop(l, print);
  printf("\033[0m");
}
---

@s The main program
--- The main program
int main(int argc, char** argv) {
  char home[PATH_MAX];
  const char* path = getenv("GWPLUG_PATH") ?: "/usr/lib/Gwion/add";
  const char** l = strsplit(path);

  get_home(home);
  if(argc > 1) {
    hcreate(PLUG_MAX);
    loop(l, fill);
    dir(home, fill);
    argv++;
    while(--argc) {
      ENTRY *e, entry = { *argv };
      if((e = hsearch(entry, FIND)))
        handle(e, home);
      else
        printf("\033[31m%s\033[0m\n", *argv);
      argv++;
    }
    hdestroy();
  } else
    list(home, l);
  free(l);
  return 0;
}
---
