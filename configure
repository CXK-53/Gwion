#!/bin/bash

die()
{
	local _ret=$2
	test -n "$_ret" || _ret=1
	test "$_PRINT_HELP" = yes && print_help >&2
	echo "$1" >&2
	exit ${_ret}
}

begins_with_short_option()
{
	local first_option all_short_options
	all_short_options='h'
	first_option="${1:0:1}"
	test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}



: "${PRG:="gwion"}"
: "${_arg_prg:=$PRG}"
: "${CC:="gcc"}"
: "${_arg_cc:=$CC}"
: "${YACC:="yacc"}"
: "${_arg_yacc:=$YACC}"
: "${LEX:="flex"}"
: "${_arg_lex:=$LEX}"
: "${PREFIX:="/usr/local"}"
: "${_arg_prefix:=$PREFIX}"
: "${SOUNDPIPE_LIB:="-lsoundpipe"}"
: "${_arg_soundpipe_lib:=$SOUNDPIPE_LIB}"
: "${SOUNDPIPE_INC:=}"
: "${_arg_soundpipe_inc:=$SOUNDPIPE_INC}"
: "${USE_DOUBLE:=off}"
: "${_arg_double:=$USE_DOUBLE}"
: "${USE_COVERAGE:=off}"
: "${_arg_coverage:=$USE_COVERAGE}"
: "${USE_GWCOV:=off}"
: "${_arg_gwcov:=$USE_GWCOV}"
: "${USE_MEMCHECK:=off}"
: "${_arg_memcheck:=$USE_MEMCHECK}"
: "${D_FUNC:=dummy}"
: "${_arg_d_func:=$D_FUNC}"
: "${DUMMY_D:=on}"
: "${_arg_dummy:=$DUMMY_D}"
: "${DUMMY_INC:=}"
: "${_arg_dummy_inc:=$DUMMY_INC}"
: "${DUMMY_LIB:=}"
: "${_arg_dummy_lib:=$DUMMY_LIB}"
: "${SPA_D:=on}"
: "${_arg_spa:=$SPA_D}"
: "${SPA_INC:=}"
: "${_arg_spa_inc:=$SPA_INC}"
: "${SPA_LIB:=}"
: "${_arg_spa_lib:=$SPA_LIB}"
: "${SNDFILE_D:=on}"
: "${_arg_sndfile:=$SNDFILE_D}"
: "${SNDFILE_INC:='/usr/include' '/usr/local/include'}"
: "${_arg_sndfile_inc:=$SNDFILE_INC}"
: "${SNDFILE_LIB:="-lsndfile"}"
: "${_arg_sndfile_lib:=$SNDFILE_LIB}"
: "${ALSA_D:=on}"
: "${_arg_alsa:=$ALSA_D}"
: "${ALSA_INC:=}"
: "${_arg_alsa_inc:=$ALSA_INC}"
: "${ALSA_LIB:="-lasound"}"
: "${_arg_alsa_lib:=$ALSA_LIB}"
: "${JACK_D:=off}"
: "${_arg_jack:=$JACK_D}"
: "${JACK_INC:=}"
: "${_arg_jack_inc:=$JACK_INC}"
: "${JACK_LIB:="-ljack"}"
: "${_arg_jack_lib:=$JACK_LIB}"
: "${PORTAUDIO_D:=off}"
: "${_arg_portaudio:=$PORTAUDIO_D}"
: "${PORTAUDIO_INC:=}"
: "${_arg_portaudio_inc:=$PORTAUDIO_INC}"
: "${PORTAUDIO_LIB:="-lportaudio"}"
: "${_arg_portaudio_lib:=$PORTAUDIO_LIB}"
: "${SOUNDIO_D:=off}"
: "${_arg_soundio:=$SOUNDIO_D}"
: "${SOUNDIO_INC:=}"
: "${_arg_soundio_inc:=$SOUNDIO_INC}"
: "${SOUNDIO_LIB:="-lsoundio"}"
: "${_arg_soundio_lib:=$SOUNDIO_LIB}"
: "${PULSE_D:=off}"
: "${_arg_pulse:=$PULSE_D}"
: "${PULSE_INC:=}"
: "${_arg_pulse_inc:=$PULSE_INC}"
: "${PULSE_LIB:="-lpulse-simple"}"
: "${_arg_pulse_lib:=$PULSE_LIB}"
: "${ADD_DIR:="add"}"
: "${_arg_add:=$ADD_DIR}"

print_help ()
{
	printf "%s\n" "The general script's help msg"
	printf 'Usage: %s [--prg <arg>] [--cc <arg>] [--yacc <arg>] [--lex <arg>] [--prefix <arg>] [--soundpipe_lib <arg>] [--soundpipe_inc <arg>] [--(no-)double] [--(no-)coverage] [--(no-)gwcov] [--(no-)memcheck] [--d_func <arg>] [--(no-)dummy] [--dummy-inc <arg>] [--dummy-lib <arg>] [--(no-)spa] [--spa-inc <arg>] [--spa-lib <arg>] [--(no-)sndfile] [--sndfile-inc <arg>] [--sndfile-lib <arg>] [--(no-)alsa] [--alsa-inc <arg>] [--alsa-lib <arg>] [--(no-)jack] [--jack-inc <arg>] [--jack-lib <arg>] [--(no-)portaudio] [--portaudio-inc <arg>] [--portaudio-lib <arg>] [--(no-)soundio] [--soundio-inc <arg>] [--soundio-lib <arg>] [--(no-)pulse] [--pulse-inc <arg>] [--pulse-lib <arg>] [--add <arg>] [-h|--help]\n' "$0"
	printf "\t%s\n" "--prg: value for PRG (default: 'gwion')"
	printf "\t%s\n" "--cc: value for CC (default: 'gcc')"
	printf "\t%s\n" "--yacc: value for YACC (default: 'yacc')"
	printf "\t%s\n" "--lex: value for LEX (default: 'flex')"
	printf "\t%s\n" "--prefix: value for PREFIX (default: '/usr/local')"
	printf "\t%s\n" "--soundpipe_lib: value for SOUNDPIPE_LIB (default: '-lsoundpipe')"
	printf "\t%s\n" "--soundpipe_inc: value for SOUNDPIPE_INC (no default)"
	printf "\t%s\n" "--double,--no-double: debug double (off by default)"
	printf "\t%s\n" "--coverage,--no-coverage: debug coverage (off by default)"
	printf "\t%s\n" "--gwcov,--no-gwcov: debug gwcov (off by default)"
	printf "\t%s\n" "--memcheck,--no-memcheck: debug memcheck (off by default)"
	printf "\t%s\n" "--d_func: debug d_func (default: 'dummy')"
	printf "\t%s\n" "--dummy,--no-dummy: enable dummy (on by default)"
	printf "\t%s\n" "--dummy-inc: Directories where to look for include files for dummy (empty by default)"
	printf "\t%s\n" "--dummy-lib: dummy library (no default)"
	printf "\t%s\n" "--spa,--no-spa: enable spa (on by default)"
	printf "\t%s\n" "--spa-inc: Directories where to look for include files for spa (empty by default)"
	printf "\t%s\n" "--spa-lib: spa library (no default)"
	printf "\t%s\n" "--sndfile,--no-sndfile: enable sndfile (on by default)"
	printf "\t%s\n" "--sndfile-inc: Directories where to look for include files for sndfile (default array: ('/usr/include' '/usr/local/include') )"
	printf "\t%s\n" "--sndfile-lib: sndfile library (default: '-lsndfile')"
	printf "\t%s\n" "--alsa,--no-alsa: enable alsa (on by default)"
	printf "\t%s\n" "--alsa-inc: Directories where to look for include files for alsa (empty by default)"
	printf "\t%s\n" "--alsa-lib: alsa library (default: '-lasound')"
	printf "\t%s\n" "--jack,--no-jack: enable jack (off by default)"
	printf "\t%s\n" "--jack-inc: Directories where to look for include files for jack (empty by default)"
	printf "\t%s\n" "--jack-lib: jack library (default: '-ljack')"
	printf "\t%s\n" "--portaudio,--no-portaudio: enable portaudio (off by default)"
	printf "\t%s\n" "--portaudio-inc: Directories where to look for include files for portaudio (empty by default)"
	printf "\t%s\n" "--portaudio-lib: portaudio library (default: '-lportaudio')"
	printf "\t%s\n" "--soundio,--no-soundio: enable soundio (off by default)"
	printf "\t%s\n" "--soundio-inc: Directories where to look for include files for soundio (empty by default)"
	printf "\t%s\n" "--soundio-lib: soundio library (default: '-lsoundio')"
	printf "\t%s\n" "--pulse,--no-pulse: enable pulse (off by default)"
	printf "\t%s\n" "--pulse-inc: Directories where to look for include files for pulse (empty by default)"
	printf "\t%s\n" "--pulse-lib: pulse library (default: '-lpulse-simple')"
	printf "\t%s\n" "--add: add path (default: 'add')"
	printf "\t%s\n" "-h,--help: Prints help"
}

parse_commandline ()
{
	while test $# -gt 0
	do
		_key="$1"
		case "$_key" in
			--prg)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_prg="$2"
				shift
				;;
			--prg=*)
				_arg_prg="${_key##--prg=}"
				;;
			--cc)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_cc="$2"
				shift
				;;
			--cc=*)
				_arg_cc="${_key##--cc=}"
				;;
			--yacc)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_yacc="$2"
				shift
				;;
			--yacc=*)
				_arg_yacc="${_key##--yacc=}"
				;;
			--lex)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_lex="$2"
				shift
				;;
			--lex=*)
				_arg_lex="${_key##--lex=}"
				;;
			--prefix)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_prefix="$2"
				shift
				;;
			--prefix=*)
				_arg_prefix="${_key##--prefix=}"
				;;
			--soundpipe_lib)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_soundpipe_lib="$2"
				shift
				;;
			--soundpipe_lib=*)
				_arg_soundpipe_lib="${_key##--soundpipe_lib=}"
				;;
			--soundpipe_inc)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_soundpipe_inc="$2"
				shift
				;;
			--soundpipe_inc=*)
				_arg_soundpipe_inc="${_key##--soundpipe_inc=}"
				;;
			--no-double|--double)
				_arg_double="on"
				test "${1:0:5}" = "--no-" && _arg_double="off"
				;;
			--no-coverage|--coverage)
				_arg_coverage="on"
				test "${1:0:5}" = "--no-" && _arg_coverage="off"
				;;
			--no-gwcov|--gwcov)
				_arg_gwcov="on"
				test "${1:0:5}" = "--no-" && _arg_gwcov="off"
				;;
			--no-memcheck|--memcheck)
				_arg_memcheck="on"
				test "${1:0:5}" = "--no-" && _arg_memcheck="off"
				;;
			--d_func)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_d_func="$2"
				shift
				;;
			--d_func=*)
				_arg_d_func="${_key##--d_func=}"
				;;
			--no-dummy|--dummy)
				_arg_dummy="on"
				test "${1:0:5}" = "--no-" && _arg_dummy="off"
				;;
			--dummy-inc)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_dummy_inc+=("$2")
				shift
				;;
			--dummy-inc=*)
				_arg_dummy_inc+=("${_key##--dummy-inc=}")
				;;
			--dummy-lib)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_dummy_lib="$2"
				shift
				;;
			--dummy-lib=*)
				_arg_dummy_lib="${_key##--dummy-lib=}"
				;;
			--no-spa|--spa)
				_arg_spa="on"
				test "${1:0:5}" = "--no-" && _arg_spa="off"
				;;
			--spa-inc)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_spa_inc+=("$2")
				shift
				;;
			--spa-inc=*)
				_arg_spa_inc+=("${_key##--spa-inc=}")
				;;
			--spa-lib)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_spa_lib="$2"
				shift
				;;
			--spa-lib=*)
				_arg_spa_lib="${_key##--spa-lib=}"
				;;
			--no-sndfile|--sndfile)
				_arg_sndfile="on"
				test "${1:0:5}" = "--no-" && _arg_sndfile="off"
				;;
			--sndfile-inc)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_sndfile_inc+=("$2")
				shift
				;;
			--sndfile-inc=*)
				_arg_sndfile_inc+=("${_key##--sndfile-inc=}")
				;;
			--sndfile-lib)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_sndfile_lib="$2"
				shift
				;;
			--sndfile-lib=*)
				_arg_sndfile_lib="${_key##--sndfile-lib=}"
				;;
			--no-alsa|--alsa)
				_arg_alsa="on"
				test "${1:0:5}" = "--no-" && _arg_alsa="off"
				;;
			--alsa-inc)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_alsa_inc+=("$2")
				shift
				;;
			--alsa-inc=*)
				_arg_alsa_inc+=("${_key##--alsa-inc=}")
				;;
			--alsa-lib)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_alsa_lib="$2"
				shift
				;;
			--alsa-lib=*)
				_arg_alsa_lib="${_key##--alsa-lib=}"
				;;
			--no-jack|--jack)
				_arg_jack="on"
				test "${1:0:5}" = "--no-" && _arg_jack="off"
				;;
			--jack-inc)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_jack_inc+=("$2")
				shift
				;;
			--jack-inc=*)
				_arg_jack_inc+=("${_key##--jack-inc=}")
				;;
			--jack-lib)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_jack_lib="$2"
				shift
				;;
			--jack-lib=*)
				_arg_jack_lib="${_key##--jack-lib=}"
				;;
			--no-portaudio|--portaudio)
				_arg_portaudio="on"
				test "${1:0:5}" = "--no-" && _arg_portaudio="off"
				;;
			--portaudio-inc)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_portaudio_inc+=("$2")
				shift
				;;
			--portaudio-inc=*)
				_arg_portaudio_inc+=("${_key##--portaudio-inc=}")
				;;
			--portaudio-lib)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_portaudio_lib="$2"
				shift
				;;
			--portaudio-lib=*)
				_arg_portaudio_lib="${_key##--portaudio-lib=}"
				;;
			--no-soundio|--soundio)
				_arg_soundio="on"
				test "${1:0:5}" = "--no-" && _arg_soundio="off"
				;;
			--soundio-inc)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_soundio_inc+=("$2")
				shift
				;;
			--soundio-inc=*)
				_arg_soundio_inc+=("${_key##--soundio-inc=}")
				;;
			--soundio-lib)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_soundio_lib="$2"
				shift
				;;
			--soundio-lib=*)
				_arg_soundio_lib="${_key##--soundio-lib=}"
				;;
			--no-pulse|--pulse)
				_arg_pulse="on"
				test "${1:0:5}" = "--no-" && _arg_pulse="off"
				;;
			--pulse-inc)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_pulse_inc+=("$2")
				shift
				;;
			--pulse-inc=*)
				_arg_pulse_inc+=("${_key##--pulse-inc=}")
				;;
			--pulse-lib)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_pulse_lib="$2"
				shift
				;;
			--pulse-lib=*)
				_arg_pulse_lib="${_key##--pulse-lib=}"
				;;
			--add)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_add="$2"
				shift
				;;
			--add=*)
				_arg_add="${_key##--add=}"
				;;
			-h|--help)
				print_help
				exit 0
				;;
			-h*)
				print_help
				exit 0
				;;
			*)
				_PRINT_HELP=yes die "FATAL ERROR: Got an unexpected argument '$1'" 1
				;;
		esac
		shift
	done
}

parse_commandline "$@"


set -e

[ -f Makefile  ] && rm Makefile
to_upper(){
	echo "$1" | tr '[:lower:]' '[:upper:]'
}

config_check() {

VALID_DRIVER=" dummy spa sndfile alsa jack portaudio soundio pulse"
grep "$_arg_d_func" <<<  "$VALID_DRIVER" > /dev/null || { echo "invalid default driver";exit 1; }

if [ "$_arg_double" = "on" ]; then _CFLAGS+=" -DUSE_DOUBLE -DSPFLOAT=double";fi
if [ "$_arg_double" = "1"  ];then _CFLAGS+=" -DUSE_DOUBLE -DSPFLOAT=double";fi
([ "$_arg_double" = "on" ] || [ "$_arg_double" = "1"  ]) || _CFLAGS+=" -DSPFLOAT=float"
if [ "$USE_COVERAGE" = "1"  ]; then _CFLAGS+=" -ftest-coverage -fprofile-arcs --coverage";fi
if [ "$USE_COVERAGE" = "on" ]; then _CFLAGS+=" -ftest-coverage -fprofile-arcs --coverage";fi
if [ "$_arg_soundpipe_inc" ]; then _CFLAGS+=" $_arg_soundpipe_inc";fi
cmd="$_arg_cc -I/usr/local/include -Iinclude $_CFLAGS utils/generate_header.c -o utils/generate_header"
eval "$cmd" || (echo 'invalid compilation options'; exit 1;)
./utils/generate_header || exit 1
}
exec >> Makefile
echo "# generated by ./configure"
make_handle() {

printf "\n# handle base options\n"
for iter in prg cc yacc lex prefix soundpipe_lib soundpipe_inc
do
	echo "$(to_upper $iter) ?=$(eval echo \$_arg_$iter)"
	done
 printf "LDFLAGS += -lm -ldl -rdynamic -lpthread\nCFLAGS += -Iinclude -std=c99 -O3 -mfpmath=sse -mtune=native -fno-strict-aliasing -Wall -pedantic -D_GNU_SOURCE\n"

printf "\n# handle boolean options\n"
for iter in double coverage gwcov memcheck
do
	if [ "$iter" = "double" ]
	then echo "USE_$(to_upper $iter) = $(eval echo \$_arg_$iter)"
	else echo "USE_$(to_upper $iter) ?= $(eval echo \$_arg_$iter)"
	fi
done

printf "\n# handle definitions\n"
d_func=d_func
for iter in $d_func

do
	echo "$(to_upper $iter) ?= $(eval echo \$_arg_${iter})_driver"
done

printf "\n# handle directories\n"
add=add
for iter in $add

do
	key=$(echo "$iter" | cut -d ':' -f 1)
	val=$(echo "$iter" | cut -d ':' -f 2)
	lib=$(echo "$iter" | cut -d ':' -f 4)
	echo "GWION_$(to_upper "$key")_DIR ?= \${PREFIX}/lib/Gwion/${val}"
done
printf "\n# handle libraries\n"
for iter in dummy spa sndfile alsa jack portaudio soundio pulse
do
	echo "$(to_upper $iter)_D ?= $(eval echo \$_arg_$iter)"
done

printf "\n# initialize source lists\n"
for iter in src
do
	echo "${iter}_src := \$(wildcard ${iter}/*.c)"
done
echo "lib_src := \$(wildcard src/lib/*.c)"
echo "oo_src := \$(wildcard src/oo/*.c)"
echo "vm_src := \$(wildcard src/vm/*.c)"
echo "ast_src := \$(wildcard src/ast/*.c)"
echo "parse_src := \$(wildcard src/parse/*.c)"
echo "ugen_src := \$(wildcard src/ugen/*.c)"
echo "util_src := \$(wildcard src/util/*.c)"
echo "emit_src := \$(wildcard src/emit/*.c)"
echo "drvr_src := src/drvr/driver.c"
}
make_add() {

printf "\n# add libraries\n"
for iter in dummy:on:: spa:on:: sndfile:on:'/usr/include','/usr/local/include':-lsndfile alsa:on::-lasound jack:off::-ljack portaudio:off::-lportaudio soundio:off::-lsoundio pulse:off::-lpulse-simple
do
	key=$(echo "$iter" | cut -d ':' -f 1)
	val=$(echo "$iter" | cut -d ':' -f 2)
	lib=$(echo "$iter" | cut -d ':' -f 4)
	if [ "${val}" = "on" ]
	then val=1
	else val=0
	fi
  [ -z "$lib" ] && printf "ifeq (\${%s_D}, on)\\nCFLAGS += -DHAVE_%s\\ndrvr_src += src/drvr/%s.c\\nelse ifeq (\${%s_D}, 1)\\nCFLAGS +=-DHAVE_%s\\ndrvr_src +=src/drvr/%s.c\\nendif\\n"     "$(to_upper "$key")" "$(to_upper "$key")" "$key" "$(to_upper "$key")" "$(to_upper "$key")" "${key}"
  [ -z "$lib" ] || printf "ifeq (\${%s_D}, on)\\nLDFLAGS += %s\\nCFLAGS += -DHAVE_%s\\ndrvr_src += src/drvr/%s.c\\nelse ifeq (\${%s_D}, 1)\\nLDFLAGS += %s\\nCFLAGS +=-DHAVE_%s\\ndrvr_src +=src/drvr/%s.c\\nendif\\n"     "$(to_upper "$key")" "${lib}" "$(to_upper "$key")" "${key}" "$(to_upper "$key")" "${lib}" "$(to_upper "$key")" "${key}"
done

printf "\n# add boolean\n"
for iter in double:off coverage:off gwcov:off memcheck:off
do
	key=$(echo "$iter" | cut -d ':' -f 1)
	val=$(echo "$iter" | cut -d ':' -f 2)
	lib=$(echo "$iter" | cut -d ':' -f 4)
	if [ "${val}" = "on" ]
then [ "$key" = "double" ] && val=double;
else [ "$key" = "double" ] && val=float;
fi
[ "$key" = "memcheck" ] && printf "ifeq (\${USE_%s}, on)\\nCFLAGS += -g\\nelse " "$(to_upper "$key")"
[ "$key" = "memcheck" ] && printf "ifeq (\${USE_%s}, 1)\\nCFLAGS += -g\\nendif\n" "$(to_upper "$key")"
[ "$key" = "coverage" ] && printf "ifeq (\${USE_%s}, on)\\nCFLAGS += -ftest-coverage -fprofile-arcs\\nelse " "$(to_upper "$key")"
[ "$key" = "coverage" ] && printf "ifeq (\${USE_%s}, 1)\\nCFLAGS += -ftest-coverage -fprofile-arcs\\nendif\n" "$(to_upper "$key")"
[ "$key" = "coverage" ] && printf "ifeq (\${USE_%s}, on)\\nLDFLAGS += --coverage\nelse " "$(to_upper "$key")"
[ "$key" = "coverage" ] && printf "ifeq (\${USE_%s}, 1)\\nLDFLAGS += --coverage\nendif\n" "$(to_upper "$key")"
[ "$key" = "gwcov"    ] && printf "ifeq (\${USE_%s}, 1)\\nCFLAGS += -DGWCOV\nendif\n" "$(to_upper "$key")"
[ "$key" = "gwcov"    ] && printf "ifeq (\${USE_%s}, on)\\nCFLAGS += -DGWCOV\nendif\n" "$(to_upper "$key")"
  done
  key="double"
  printf "ifeq (\${USE_%s}, on)\\nCFLAGS += -DUSE_%s -DSPFLOAT=double\\nelse ifeq (\${USE_%s}, 1)\\nCFLAGS +=-DUSE_%s -DSPFLOAT=double\\nelse\\nCFLAGS+=-DSPFLOAT=float\\nendif\\n" "$(to_upper $key)" "$(to_upper $key)" "$(to_upper $key)" "$(to_upper $key)"

printf "\n# add definitions\n"
d_func=d_func
for iter in $d_func

do
	key=$(echo "$iter" | cut -d ':' -f 1)
	val=$(echo "$iter" | cut -d ':' -f 2)
	lib=$(echo "$iter" | cut -d ':' -f 4)
	echo "CFLAGS+= -D$(to_upper "$key")=\${$(to_upper "$key")}"
done

printf "\n# add directories\n"
add=add
for iter in $add

do
	printf "CFLAGS+=-DGWION_%s_DIR=\\\\\\\"\${GWION_%s_DIR}\\\\\\\"\n" "$(to_upper $iter)" "$(to_upper $iter)"
done

printf "\n# add soundpipe\n"
echo "LDFLAGS += \${SOUNDPIPE_LIB}"
echo "CFLAGS  += \${SOUNDPIPE_INC}"

printf "\n# initialize object lists\n"
for iter in src lib ast parse emit oo vm ugen util drvr
do
	echo "${iter}_obj := \$(${iter}_src:.c=.o)"
done
}
make_recipe() {
cat << EOF
TOOL_OBJ=src/util/map.o src/util/vector.o src/util/symbol.o src/util/err_msg.o src/util/absyn.c src/ast/lexer.o src/ast/parser.o src/parse/op_utils.o
EOF

cat << EOF

ifeq (\$(findstring DEBUG,\$(CFLAGS)), DEBUG)
DEBUG = 1
endif

ifeq (\${DEBUG}, 1)
CFLAGS+=-DDEBUG
endif

CCFG="\${CFLAGS}"
LDCFG="\${LDFLAGS}"
ifeq (\$(shell uname), Linux)
LDFLAGS+=-lrt
endif

all: options \${src_obj} \${lib_obj} \${ast_obj} \${parse_obj} \${emit_obj} \${oo_obj} \${vm_obj} \${util_obj} \${ugen_obj} \${drvr_obj}
	\$(info link \${PRG})
	@\${CC} \${src_obj} \${lib_obj} \${ast_obj} \${parse_obj} \${emit_obj} \${oo_obj} \${vm_obj} \${ugen_obj} \${util_obj} \${drvr_obj} \${LDFLAGS} -o \${PRG}

options:
	\$(info CFLAGS  : \${CFLAGS})
	\$(info LDFLAGS  : \${LDFLAGS})

clean:
	\$(info cleaning ...)
	@rm -f */*.o */*/*.o */*.gw.* */*/*.gw.* */*/*.gcda */*/*.gcno ${PRG}

src/arg.o:
	\$(info compile \$(<:.c=) (with arguments defines))
	@\${CC} \${CFLAGS} -c src/arg.c -o src/arg.o -DLDFLAGS='\${LDCFG}' -DCFLAGS='\${CCFG}'

.c.o:
	\$(info compile \$(<:.c=))
	@\${CC} \${CFLAGS} -c \$< -o \$(<:.c=.o)

install: directories
	cp \${PRG} \${PREFIX}

uninstall:
	rm \${PREFIX}/\${PRG}

test:
	@bash utils/test.sh tests/sh severity=11 test/sh examples severity=10 tests/error tests/tree tests/ugen_coverage test/bug

parser:
	\$(info generating parser)
	@\${YACC} -o src/ast/parser.c --defines=include/parser.h utils/gwion.y

lexer:
	\$(info generating lexer)
	@\${LEX}  -o src/ast/lexer.c utils/gwion.l

gwcov: utils/gwcov.o
	\$(info compiling gwcov)
	@\${CC} \${LDFLAGS} utils/gwcov.o -o gwcov

gwlint: \${TOOL_OBJ} utils/gwlint.o
	\$(info compiling gwlint)
	@\${CC} \${LDFLAGS} \${CFLAGS} \${TOOL_OBJ} -o gwlint -DGWLINT utils/gwlint.o

gwtag: \${TOOL_OBJ} utils/gwtag.o
	\$(info compiling gwlint)
	@\${CC}  \${LDFLAGS} \${CFLAGS} \${TOOL_OBJ} -o gwtag -DGWLINT utils/gwtag.o

directories:
	mkdir -p \${PREFIX} \${GWION_ADD_DIR}
EOF

}
config_check
make_handle
make_add
make_recipe
