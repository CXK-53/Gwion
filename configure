#!/bin/bash
 # ARG_OPTIONAL_SINGLE([prg],[],[value for PRG],[gwion])
# ARG_OPTIONAL_SINGLE([cc],[],[value for CC],[gcc])
# ARG_OPTIONAL_SINGLE([yacc],[],[value for YACC],[yacc])
# ARG_OPTIONAL_SINGLE([lex],[],[value for LEX],[flex])
# ARG_OPTIONAL_SINGLE([data],[],[value for DATA],[../Soundpipe/modules/data])
# ARG_OPTIONAL_SINGLE([prefix],[],[value for PREFIX],[/usr/local])
# ARG_OPTIONAL_SINGLE([soundpipe_lib],[],[value for SOUNDPIPE_LIB],[-lsoundpipe])
# ARG_OPTIONAL_SINGLE([soundpipe_inc],[],[value for SOUNDPIPE_INC],[])
# ARG_OPTIONAL_BOOLEAN([double],[],[debug double],[on])
# ARG_OPTIONAL_BOOLEAN([coverage],[],[debug coverage],[off])
# ARG_OPTIONAL_BOOLEAN([memcheck],[],[debug memcheck],[off])
# ARG_OPTIONAL_SINGLE([d_func],[],[debug d_func],[dummy])
# ARG_OPTIONAL_BOOLEAN([dummy],[],[enable dummy],[on])
# ARG_OPTIONAL_REPEATED([dummy-inc],[],[Directories where to look for include files for dummy],[])
# ARG_OPTIONAL_SINGLE([dummy-lib],[],[dummy library],[])
# ARG_OPTIONAL_BOOLEAN([spa],[],[enable spa],[off])
# ARG_OPTIONAL_REPEATED([spa-inc],[],[Directories where to look for include files for spa],[])
# ARG_OPTIONAL_SINGLE([spa-lib],[],[spa library],[])
# ARG_OPTIONAL_BOOLEAN([sndfile],[],[enable sndfile],[on])
# ARG_OPTIONAL_REPEATED([sndfile-inc],[],[Directories where to look for include files for sndfile],['/usr/include' '/usr/local/include'])
# ARG_OPTIONAL_SINGLE([sndfile-lib],[],[sndfile library],[-lsndfile])
# ARG_OPTIONAL_BOOLEAN([alsa],[],[enable alsa],[on])
# ARG_OPTIONAL_REPEATED([alsa-inc],[],[Directories where to look for include files for alsa],[])
# ARG_OPTIONAL_SINGLE([alsa-lib],[],[alsa library],[-lasound])
# ARG_OPTIONAL_BOOLEAN([jack],[],[enable jack],[off])
# ARG_OPTIONAL_REPEATED([jack-inc],[],[Directories where to look for include files for jack],[])
# ARG_OPTIONAL_SINGLE([jack-lib],[],[jack library],[])
# ARG_OPTIONAL_BOOLEAN([portaudio],[],[enable portaudio],[off])
# ARG_OPTIONAL_REPEATED([portaudio-inc],[],[Directories where to look for include files for portaudio],[])
# ARG_OPTIONAL_SINGLE([portaudio-lib],[],[portaudio library],[])
# ARG_OPTIONAL_BOOLEAN([soundio],[],[enable soundio],[off])
# ARG_OPTIONAL_REPEATED([soundio-inc],[],[Directories where to look for include files for soundio],[])
# ARG_OPTIONAL_SINGLE([soundio-lib],[],[soundio library],[])
# ARG_OPTIONAL_SINGLE([api],[],[api path],[api])
# ARG_OPTIONAL_SINGLE([doc],[],[doc path],[doc])
# ARG_OPTIONAL_SINGLE([tag],[],[tag path],[tag])
# ARG_OPTIONAL_SINGLE([tok],[],[tok path],[tok])
# ARG_OPTIONAL_SINGLE([add],[],[add path],[add])
# ARG_OPTIONAL_BOOLEAN([debug-compile],[],[debug compile],[off])
# ARG_OPTIONAL_BOOLEAN([debug-operator],[],[debug operator],[off])
# ARG_OPTIONAL_BOOLEAN([debug-type],[],[debug type],[off])
# ARG_OPTIONAL_BOOLEAN([debug-scan0],[],[debug scan0],[off])
# ARG_OPTIONAL_BOOLEAN([debug-scan1],[],[debug scan1],[off])
# ARG_OPTIONAL_BOOLEAN([debug-scan2],[],[debug scan2],[off])
# ARG_OPTIONAL_BOOLEAN([debug-emit],[],[debug emit],[off])
# ARG_OPTIONAL_BOOLEAN([debug-vm],[],[debug vm],[off])
# ARG_OPTIONAL_BOOLEAN([debug-instr],[],[debug instr],[off])
# ARG_OPTIONAL_BOOLEAN([debug-shreduler],[],[debug shreduler],[off])
# ARG_OPTIONAL_BOOLEAN([debug-stack],[],[debug stack],[off])
# ARG_HELP([The general script's help msg])
# ARGBASH_GO()
# needed because of Argbash --> m4_ignore([
### START OF CODE GENERATED BY Argbash v2.3.0 one line above ###
# Argbash is a bash code generator used to get arguments parsing right.
# Argbash is FREE SOFTWARE, see https://argbash.io for more info

die()
{
	local _ret=$2
	test -n "$_ret" || _ret=1
	test "$_PRINT_HELP" = yes && print_help >&2
	echo "$1" >&2
	exit ${_ret}
}

# THE DEFAULTS INITIALIZATION - OPTIONALS
: "${PRG:=gwion}"
: "${_arg_prg:=$PRG}"
: "${CC:=gcc}"
: "${_arg_cc:=$CC}"
: "${YACC:=yacc}"
: "${_arg_yacc:=$YACC}"
: "${LEX:=flex}"
: "${_arg_lex:=$LEX}"
: "${DATA:=../Soundpipe/modules/data}"
: "${_arg_data:=$DATA}"
: "${PREFIX:=/usr/local}"
: "${_arg_prefix:=$PREFIX}"
: "${SOUNDPIPE_LIB:=-lsoundpipe}"
: "${_arg_soundpipe_lib:=$SOUNDPIPE_LIB}"
_arg_soundpipe_inc=
: "${USE_DOUBLE:=on}"
: "${_arg_double:=$USE_DOUBLE}"
: "${USE_COVERAGE:=off}"
: "${_arg_coverage:=$USE_COVERAGE}"
: "${USE_MEMCHECK:=off}"
: "${_arg_memcheck:=$USE_MEMCHECK}"
: "${D_FUNC:=dummy_driver}"
: "${_arg_d_func:=D_FUNC}"
: "${DUMMY_D:=on}"
: "${_arg_dummy:=$DUMMY_D}"
: "${DUMMY_INC:=}"
: "${_arg_dummy_inc:=$DUMMY_INC}"
: "${DUMMY_LIB:= }"
: "${_arg_dummy_lib:="$DUMMY_LIB"}"
: "${SPA_D:=off}"
: "${_arg_spa:=$SPA_D}"
: "${SPA_INC:=}"
: "${_arg_spa_inc:=$SPA_INC}"
: "${SPA_LIB:= }"
: "${_arg_spa_lib:="$SPA_LIB"}"
: "${SNDFILE_D:=on}"
: "${_arg_sndfile:=$SNDFILE_D}"
: "${SNDFILE_INC:='/usr/include' '/usr/local/include'}"
: "${_arg_sndfile_inc:=$SNDFILE_INC}"
: "${SNDFILE_LIB:="-lsndfile" }"
: "${_arg_sndfile_lib:="$SNDFILE_LIB"}"
: "${ALSA_D:=on}"
: "${_arg_alsa:=$ALSA_D}"
: "${ALSA_INC:=}"
: "${_arg_alsa_inc:=$ALSA_INC}"
: "${ALSA_LIB:="-lasound" }"
: "${_arg_alsa_lib:="$ALSA_LIB"}"
: "${JACK_D:=off}"
: "${_arg_jack:=$JACK_D}"
: "${JACK_INC:=}"
: "${_arg_jack_inc:=$JACK_INC}"
: "${JACK_LIB:= }"
: "${_arg_jack_lib:="$JACK_LIB"}"
: "${PORTAUDIO_D:=off}"
: "${_arg_portaudio:=$PORTAUDIO_D}"
: "${PORTAUDIO_INC:=}"
: "${_arg_portaudio_inc:=$PORTAUDIO_INC}"
: "${PORTAUDIO_LIB:= }"
: "${_arg_portaudio_lib:="$PORTAUDIO_LIB"}"
: "${SOUNDIO_D:=off}"
: "${_arg_soundio:=$SOUNDIO_D}"
: "${SOUNDIO_INC:=}"
: "${_arg_soundio_inc:=$SOUNDIO_INC}"
: "${SOUNDIO_LIB:= }"
: "${_arg_soundio_lib:="$SOUNDIO_LIB"}"
: "${API_DIR:="api"}"
: "${_arg_api:=$API_DIR}"
: "${DOC_DIR:="doc"}"
: "${_arg_doc:=$DOC_DIR}"
: "${TAG_DIR:="tag"}"
: "${_arg_tag:=$TAG_DIR}"
: "${TOK_DIR:="tok"}"
: "${_arg_tok:=$TOK_DIR}"
: "${ADD_DIR:="add"}"
: "${_arg_add:=$ADD_DIR}"
: "${DEBUG_COMPILE:=off}"
: "${_arg_debug_compile:=$DEBUG_COMPILE}"
: "${DEBUG_OPERATOR:=off}"
: "${_arg_debug_operator:=$DEBUG_OPERATOR}"
: "${DEBUG_TYPE:=off}"
: "${_arg_debug_type:=$DEBUG_TYPE}"
: "${DEBUG_SCAN0:=off}"
: "${_arg_debug_scan0:=$DEBUG_SCAN0}"
: "${DEBUG_SCAN1:=off}"
: "${_arg_debug_scan1:=$DEBUG_SCAN1}"
: "${DEBUG_SCAN2:=off}"
: "${_arg_debug_scan2:=$DEBUG_SCAN2}"
: "${DEBUG_EMIT:=off}"
: "${_arg_debug_emit:=$DEBUG_EMIT}"
: "${DEBUG_VM:=off}"
: "${_arg_debug_vm:=$DEBUG_VM}"
: "${DEBUG_INSTR:=off}"
: "${_arg_debug_instr:=$DEBUG_INSTR}"
: "${DEBUG_SHREDULER:=off}"
: "${_arg_debug_shreduler:=$DEBUG_SHREDULER}"
: "${DEBUG_STACK:=off}"
: "${_arg_debug_stack:=$DEBUG_STACK}"

print_help ()
{
	echo "The general script's help msg"
	printf 'Usage: %s [--prg <arg>] [--cc <arg>] [--yacc <arg>] [--lex <arg>] [--data <arg>] [--prefix <arg>] [--soundpipe_lib <arg>] [--soundpipe_inc <arg>] [--(no-)double] [--(no-)coverage] [--(no-)memcheck] [--d_func <arg>] [--(no-)dummy] [--dummy-inc <arg>] [--dummy-lib <arg>] [--(no-)spa] [--spa-inc <arg>] [--spa-lib <arg>] [--(no-)sndfile] [--sndfile-inc <arg>] [--sndfile-lib <arg>] [--(no-)alsa] [--alsa-inc <arg>] [--alsa-lib <arg>] [--(no-)jack] [--jack-inc <arg>] [--jack-lib <arg>] [--(no-)portaudio] [--portaudio-inc <arg>] [--portaudio-lib <arg>] [--(no-)soundio] [--soundio-inc <arg>] [--soundio-lib <arg>] [--api <arg>] [--doc <arg>] [--tag <arg>] [--tok <arg>] [--add <arg>] [--(no-)debug-compile] [--(no-)debug-operator] [--(no-)debug-type] [--(no-)debug-scan0] [--(no-)debug-scan1] [--(no-)debug-scan2] [--(no-)debug-emit] [--(no-)debug-vm] [--(no-)debug-instr] [--(no-)debug-shreduler] [--(no-)debug-stack] [-h|--help]
' "$0"
	printf "	%s
" "--prg: value for PRG (default: gwion)"
	printf "	%s
" "--cc: value for CC (default: gcc)"
	printf "	%s
" "--yacc: value for YACC (default: yacc)"
	printf "	%s
" "--lex: value for LEX (default: flex)"
	printf "	%s
" "--data: value for DATA (default: ../Soundpipe/modules/data)"
	printf "	%s
" "--prefix: value for PREFIX (default: /usr/local)"
	printf "	%s
" "--soundpipe_lib: value for SOUNDPIPE_LIB (default: -lsoundpipe)"
	printf "	%s
" "--soundpipe_inc: value for SOUNDPIPE_INC (no default)"
	printf "	%s
" "--double,--no-double: debug double (on by default)"
	printf "	%s
" "--coverage,--no-coverage: debug coverage (off by default)"
	printf "	%s
" "--memcheck,--no-memcheck: debug memcheck (off by default)"
	printf "	%s
" "--d_func: debug d_func (default: dummy)"
	printf "	%s
" "--dummy,--no-dummy: enable dummy (on by default)"
	printf "	%s
" "--dummy-inc: Directories where to look for include files for dummy (empty by default)"
	printf "	%s
" "--dummy-lib: dummy library (no default)"
	printf "	%s
" "--spa,--no-spa: enable spa (off by default)"
	printf "	%s
" "--spa-inc: Directories where to look for include files for spa (empty by default)"
	printf "	%s
" "--spa-lib: spa library (no default)"
	printf "	%s
" "--sndfile,--no-sndfile: enable sndfile (on by default)"
	printf "	%s
" "--sndfile-inc: Directories where to look for include files for sndfile (default array: ('/usr/include' '/usr/local/include') )"
	printf "	%s
" "--sndfile-lib: sndfile library (default: -lsndfile)"
	printf "	%s
" "--alsa,--no-alsa: enable alsa (on by default)"
	printf "	%s
" "--alsa-inc: Directories where to look for include files for alsa (empty by default)"
	printf "	%s
" "--alsa-lib: alsa library (default: -lasound)"
	printf "	%s
" "--jack,--no-jack: enable jack (off by default)"
	printf "	%s
" "--jack-inc: Directories where to look for include files for jack (empty by default)"
	printf "	%s
" "--jack-lib: jack library (no default)"
	printf "	%s
" "--portaudio,--no-portaudio: enable portaudio (off by default)"
	printf "	%s
" "--portaudio-inc: Directories where to look for include files for portaudio (empty by default)"
	printf "	%s
" "--portaudio-lib: portaudio library (no default)"
	printf "	%s
" "--soundio,--no-soundio: enable soundio (off by default)"
	printf "	%s
" "--soundio-inc: Directories where to look for include files for soundio (empty by default)"
	printf "	%s
" "--soundio-lib: soundio library (no default)"
	printf "	%s
" "--api: api path (default: api)"
	printf "	%s
" "--doc: doc path (default: doc)"
	printf "	%s
" "--tag: tag path (default: tag)"
	printf "	%s
" "--tok: tok path (default: tok)"
	printf "	%s
" "--add: add path (default: add)"
	printf "	%s
" "--debug-compile,--no-debug-compile: debug compile (off by default)"
	printf "	%s
" "--debug-operator,--no-debug-operator: debug operator (off by default)"
	printf "	%s
" "--debug-type,--no-debug-type: debug type (off by default)"
	printf "	%s
" "--debug-scan0,--no-debug-scan0: debug scan0 (off by default)"
	printf "	%s
" "--debug-scan1,--no-debug-scan1: debug scan1 (off by default)"
	printf "	%s
" "--debug-scan2,--no-debug-scan2: debug scan2 (off by default)"
	printf "	%s
" "--debug-emit,--no-debug-emit: debug emit (off by default)"
	printf "	%s
" "--debug-vm,--no-debug-vm: debug vm (off by default)"
	printf "	%s
" "--debug-instr,--no-debug-instr: debug instr (off by default)"
	printf "	%s
" "--debug-shreduler,--no-debug-shreduler: debug shreduler (off by default)"
	printf "	%s
" "--debug-stack,--no-debug-stack: debug stack (off by default)"
	printf "	%s
" "-h,--help: Prints help"
}

# THE PARSING ITSELF
while test $# -gt 0
do
	_key="$1"
	case "$_key" in
		--prg|--prg=*)
			_val="${_key##--prg=}"
			if test "$_val" = "$_key"
			then
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_val="$2"
				shift
			fi
			_arg_prg="$_val"
			;;
		--cc|--cc=*)
			_val="${_key##--cc=}"
			if test "$_val" = "$_key"
			then
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_val="$2"
				shift
			fi
			_arg_cc="$_val"
			;;
		--yacc|--yacc=*)
			_val="${_key##--yacc=}"
			if test "$_val" = "$_key"
			then
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_val="$2"
				shift
			fi
			_arg_yacc="$_val"
			;;
		--lex|--lex=*)
			_val="${_key##--lex=}"
			if test "$_val" = "$_key"
			then
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_val="$2"
				shift
			fi
			_arg_lex="$_val"
			;;
		--data|--data=*)
			_val="${_key##--data=}"
			if test "$_val" = "$_key"
			then
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_val="$2"
				shift
			fi
			_arg_data="$_val"
			;;
		--prefix|--prefix=*)
			_val="${_key##--prefix=}"
			if test "$_val" = "$_key"
			then
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_val="$2"
				shift
			fi
			_arg_prefix="$_val"
			;;
		--soundpipe_lib|--soundpipe_lib=*)
			_val="${_key##--soundpipe_lib=}"
			if test "$_val" = "$_key"
			then
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_val="$2"
				shift
			fi
			_arg_soundpipe_lib="$_val"
			;;
		--soundpipe_inc|--soundpipe_inc=*)
			_val="${_key##--soundpipe_inc=}"
			if test "$_val" = "$_key"
			then
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_val="$2"
				shift
			fi
			_arg_soundpipe_inc="$_val"
			;;
		--no-double|--double)
			_arg_double="on"
			test "${1:0:5}" = "--no-" && _arg_double="off"
			;;
		--no-coverage|--coverage)
			_arg_coverage="on"
			test "${1:0:5}" = "--no-" && _arg_coverage="off"
			;;
		--no-memcheck|--memcheck)
			_arg_memcheck="on"
			test "${1:0:5}" = "--no-" && _arg_memcheck="off"
			;;
		--d_func|--d_func=*)
			_val="${_key##--d_func=}"
			if test "$_val" = "$_key"
			then
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_val="$2"
				shift
			fi
			_arg_d_func="$_val"
			;;
		--no-dummy|--dummy)
			_arg_dummy="on"
			test "${1:0:5}" = "--no-" && _arg_dummy="off"
			;;
		--dummy-inc|--dummy-inc=*)
			_val="${_key##--dummy-inc=}"
			if test "$_val" = "$_key"
			then
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_val="$2"
				shift
			fi
			_arg_dummy_inc+=("$_val")
			;;
		--dummy-lib|--dummy-lib=*)
			_val="${_key##--dummy-lib=}"
			if test "$_val" = "$_key"
			then
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_val="$2"
				shift
			fi
			_arg_dummy_lib="$_val"
			;;
		--no-spa|--spa)
			_arg_spa="on"
			test "${1:0:5}" = "--no-" && _arg_spa="off"
			;;
		--spa-inc|--spa-inc=*)
			_val="${_key##--spa-inc=}"
			if test "$_val" = "$_key"
			then
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_val="$2"
				shift
			fi
			_arg_spa_inc+=("$_val")
			;;
		--spa-lib|--spa-lib=*)
			_val="${_key##--spa-lib=}"
			if test "$_val" = "$_key"
			then
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_val="$2"
				shift
			fi
			_arg_spa_lib="$_val"
			;;
		--no-sndfile|--sndfile)
			_arg_sndfile="on"
			test "${1:0:5}" = "--no-" && _arg_sndfile="off"
			;;
		--sndfile-inc|--sndfile-inc=*)
			_val="${_key##--sndfile-inc=}"
			if test "$_val" = "$_key"
			then
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_val="$2"
				shift
			fi
			_arg_sndfile_inc+=("$_val")
			;;
		--sndfile-lib|--sndfile-lib=*)
			_val="${_key##--sndfile-lib=}"
			if test "$_val" = "$_key"
			then
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_val="$2"
				shift
			fi
			_arg_sndfile_lib="$_val"
			;;
		--no-alsa|--alsa)
			_arg_alsa="on"
			test "${1:0:5}" = "--no-" && _arg_alsa="off"
			;;
		--alsa-inc|--alsa-inc=*)
			_val="${_key##--alsa-inc=}"
			if test "$_val" = "$_key"
			then
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_val="$2"
				shift
			fi
			_arg_alsa_inc+=("$_val")
			;;
		--alsa-lib|--alsa-lib=*)
			_val="${_key##--alsa-lib=}"
			if test "$_val" = "$_key"
			then
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_val="$2"
				shift
			fi
			_arg_alsa_lib="$_val"
			;;
		--no-jack|--jack)
			_arg_jack="on"
			test "${1:0:5}" = "--no-" && _arg_jack="off"
			;;
		--jack-inc|--jack-inc=*)
			_val="${_key##--jack-inc=}"
			if test "$_val" = "$_key"
			then
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_val="$2"
				shift
			fi
			_arg_jack_inc+=("$_val")
			;;
		--jack-lib|--jack-lib=*)
			_val="${_key##--jack-lib=}"
			if test "$_val" = "$_key"
			then
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_val="$2"
				shift
			fi
			_arg_jack_lib="$_val"
			;;
		--no-portaudio|--portaudio)
			_arg_portaudio="on"
			test "${1:0:5}" = "--no-" && _arg_portaudio="off"
			;;
		--portaudio-inc|--portaudio-inc=*)
			_val="${_key##--portaudio-inc=}"
			if test "$_val" = "$_key"
			then
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_val="$2"
				shift
			fi
			_arg_portaudio_inc+=("$_val")
			;;
		--portaudio-lib|--portaudio-lib=*)
			_val="${_key##--portaudio-lib=}"
			if test "$_val" = "$_key"
			then
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_val="$2"
				shift
			fi
			_arg_portaudio_lib="$_val"
			;;
		--no-soundio|--soundio)
			_arg_soundio="on"
			test "${1:0:5}" = "--no-" && _arg_soundio="off"
			;;
		--soundio-inc|--soundio-inc=*)
			_val="${_key##--soundio-inc=}"
			if test "$_val" = "$_key"
			then
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_val="$2"
				shift
			fi
			_arg_soundio_inc+=("$_val")
			;;
		--soundio-lib|--soundio-lib=*)
			_val="${_key##--soundio-lib=}"
			if test "$_val" = "$_key"
			then
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_val="$2"
				shift
			fi
			_arg_soundio_lib="$_val"
			;;
		--api|--api=*)
			_val="${_key##--api=}"
			if test "$_val" = "$_key"
			then
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_val="$2"
				shift
			fi
			_arg_api="$_val"
			;;
		--doc|--doc=*)
			_val="${_key##--doc=}"
			if test "$_val" = "$_key"
			then
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_val="$2"
				shift
			fi
			_arg_doc="$_val"
			;;
		--tag|--tag=*)
			_val="${_key##--tag=}"
			if test "$_val" = "$_key"
			then
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_val="$2"
				shift
			fi
			_arg_tag="$_val"
			;;
		--tok|--tok=*)
			_val="${_key##--tok=}"
			if test "$_val" = "$_key"
			then
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_val="$2"
				shift
			fi
			_arg_tok="$_val"
			;;
		--add|--add=*)
			_val="${_key##--add=}"
			if test "$_val" = "$_key"
			then
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_val="$2"
				shift
			fi
			_arg_add="$_val"
			;;
		--no-debug-compile|--debug-compile)
			_arg_debug_compile="on"
			test "${1:0:5}" = "--no-" && _arg_debug_compile="off"
			;;
		--no-debug-operator|--debug-operator)
			_arg_debug_operator="on"
			test "${1:0:5}" = "--no-" && _arg_debug_operator="off"
			;;
		--no-debug-type|--debug-type)
			_arg_debug_type="on"
			test "${1:0:5}" = "--no-" && _arg_debug_type="off"
			;;
		--no-debug-scan0|--debug-scan0)
			_arg_debug_scan0="on"
			test "${1:0:5}" = "--no-" && _arg_debug_scan0="off"
			;;
		--no-debug-scan1|--debug-scan1)
			_arg_debug_scan1="on"
			test "${1:0:5}" = "--no-" && _arg_debug_scan1="off"
			;;
		--no-debug-scan2|--debug-scan2)
			_arg_debug_scan2="on"
			test "${1:0:5}" = "--no-" && _arg_debug_scan2="off"
			;;
		--no-debug-emit|--debug-emit)
			_arg_debug_emit="on"
			test "${1:0:5}" = "--no-" && _arg_debug_emit="off"
			;;
		--no-debug-vm|--debug-vm)
			_arg_debug_vm="on"
			test "${1:0:5}" = "--no-" && _arg_debug_vm="off"
			;;
		--no-debug-instr|--debug-instr)
			_arg_debug_instr="on"
			test "${1:0:5}" = "--no-" && _arg_debug_instr="off"
			;;
		--no-debug-shreduler|--debug-shreduler)
			_arg_debug_shreduler="on"
			test "${1:0:5}" = "--no-" && _arg_debug_shreduler="off"
			;;
		--no-debug-stack|--debug-stack)
			_arg_debug_stack="on"
			test "${1:0:5}" = "--no-" && _arg_debug_stack="off"
			;;
		-h|--help)
			print_help
			exit 0
			;;
		*)
			_PRINT_HELP=yes die "FATAL ERROR: Got an unexpected argument '$1'" 1
			;;
	esac
	shift
done

# OTHER STUFF GENERATED BY Argbash

### END OF CODE GENERATED BY Argbash (sortof) ### ])
# [ <-- needed because of Argbash
[ -f Makefile  ] && rm Makefile
set -e 
if [ "$_arg_double" = "on" ];then _CFLAGS+=" -DUSE_DOUBLE -DSPFLOAT=double";fi
if [ "$_arg_double" = "1"  ];then _CFLAGS+=" -DUSE_DOUBLE -DSPFLOAT=double";fi
([ "$_arg_double" = "on" ] || [ "$_arg_double" = "1"  ]) || _CFLAGS+=" -DSPFLOAT=float"
"$_arg_cc" -ftest-coverage -fprofile-arcs --coverage -Iinclude $_arg_soundpipe_inc -DDEBUG $_CFLAGS util/generate_header.c core/err_msg.c -o util/generate_header || (echo 'invalid compilation options'; exit 1;)
echo generate header
./util/generate_header || exit 1
echo generate parser
$_arg_yacc -o eval/parser.c -dv eval/gwion.y -x || exit 1
echo generate lexer
$_arg_lex -o eval/lexer.c eval/gwion.l || exit 1
echo generate soundpipe wrapper
lua util/import.lua "$_arg_data" > ugen/soundpipe.c || exit 1
# handle options
{ echo "# handle options"
echo "PRG ?= ${_arg_prg}"
echo "CC ?= ${_arg_cc}"
echo "YACC ?= ${_arg_yacc}"
echo "LEX ?= ${_arg_lex}"
echo "DATA ?= ${_arg_data}"
echo "PREFIX ?= ${_arg_prefix}"
echo "SOUNDPIPE_LIB ?= ${_arg_soundpipe_lib}"
echo "SOUNDPIPE_INC ?= ${_arg_soundpipe_inc}"
} >> Makefile

cat <<  EOF >> Makefile

LDFLAGS += -lm -ldl -rdynamic -lpthread
CFLAGS += -Iinclude -std=c99 -O3 -mfpmath=sse -mtune=native -fno-strict-aliasing -Wall -pedantic -D_GNU_SOURCE

EOF
# handle boolean options
echo "# handle boolean options" >> Makefile
echo "USE_DOUBLE ?= $_arg_double" >> Makefile
echo "USE_COVERAGE ?= $_arg_coverage" >> Makefile
echo "USE_MEMCHECK ?= $_arg_memcheck" >> Makefile
# handle definitions
echo "# handle definitions" >> Makefile
echo "D_FUNC ?= dummy_driver" >> Makefile
# handle directories
echo "# handle directories" >> Makefile
echo "GWION_API_DIR ?= \${PREFIX}/lib/Gwion/api" >> Makefile
echo "GWION_DOC_DIR ?= \${PREFIX}/lib/Gwion/doc" >> Makefile
echo "GWION_TAG_DIR ?= \${PREFIX}/lib/Gwion/tag" >> Makefile
echo "GWION_TOK_DIR ?= \${PREFIX}/lib/Gwion/tok" >> Makefile
echo "GWION_ADD_DIR ?= \${PREFIX}/lib/Gwion/add" >> Makefile
# handle libraries
echo "# handle libraries" >> Makefile
echo "DUMMY_D ?= 1" >> Makefile
echo "SPA_D ?= 0" >> Makefile
echo "SNDFILE_D ?= 1" >> Makefile
echo "ALSA_D ?= 1" >> Makefile
echo "JACK_D ?= 0" >> Makefile
echo "PORTAUDIO_D ?= 0" >> Makefile
echo "SOUNDIO_D ?= 0" >> Makefile
# handle debug
echo "# handle debug" >> Makefile
echo "DEBUG_COMPILE ?= $_arg_debug_compile" >> Makefile
echo "DEBUG_OPERATOR ?= $_arg_debug_operator" >> Makefile
echo "DEBUG_TYPE ?= $_arg_debug_type" >> Makefile
echo "DEBUG_SCAN0 ?= $_arg_debug_scan0" >> Makefile
echo "DEBUG_SCAN1 ?= $_arg_debug_scan1" >> Makefile
echo "DEBUG_SCAN2 ?= $_arg_debug_scan2" >> Makefile
echo "DEBUG_EMIT ?= $_arg_debug_emit" >> Makefile
echo "DEBUG_VM ?= $_arg_debug_vm" >> Makefile
echo "DEBUG_INSTR ?= $_arg_debug_instr" >> Makefile
echo "DEBUG_SHREDULER ?= $_arg_debug_shreduler" >> Makefile
echo "DEBUG_STACK ?= $_arg_debug_stack" >> Makefile
{
	echo ''
	echo '# initialize source lists'
	for tgt in "core" "lang" "ugen" "eval"
	do echo "${tgt}_src := \$(wildcard ${tgt}/*.c)"
	done
	echo 'drvr_src := drvr/driver.c'
} >> Makefile
echo -e "
# add libraries" >> Makefile
echo -e "ifeq (\${DUMMY_D}, on)
CFLAGS += -DHAVE_DUMMY
drvr_src += drvr/dummy.c
else ifeq (\${DUMMY_D}, 1)
CFLAGS +=-DHAVE_DUMMY
drvr_src +=drvr/dummy.c
endif
" >> Makefile
echo -e "ifeq (\${SPA_D}, on)
CFLAGS += -DHAVE_SPA
drvr_src += drvr/spa.c
else ifeq (\${SPA_D}, 1)
CFLAGS +=-DHAVE_SPA
drvr_src +=drvr/spa.c
endif
" >> Makefile
echo -e "ifeq (\${SNDFILE_D}, on)
LDFLAGS += -lsndfile
CFLAGS += -DHAVE_SNDFILE
drvr_src += drvr/sndfile.c
else ifeq (\${SNDFILE_D}, 1)
LDFLAGS += -lsndfile
CFLAGS +=-DHAVE_SNDFILE
drvr_src +=drvr/sndfile.c
endif
" >> Makefile
echo -e "ifeq (\${ALSA_D}, on)
LDFLAGS += -lasound
CFLAGS += -DHAVE_ALSA
drvr_src += drvr/alsa.c
else ifeq (\${ALSA_D}, 1)
LDFLAGS += -lasound
CFLAGS +=-DHAVE_ALSA
drvr_src +=drvr/alsa.c
endif
" >> Makefile
echo -e "ifeq (\${JACK_D}, on)
CFLAGS += -DHAVE_JACK
drvr_src += drvr/jack.c
else ifeq (\${JACK_D}, 1)
CFLAGS +=-DHAVE_JACK
drvr_src +=drvr/jack.c
endif
" >> Makefile
echo -e "ifeq (\${PORTAUDIO_D}, on)
CFLAGS += -DHAVE_PORTAUDIO
drvr_src += drvr/portaudio.c
else ifeq (\${PORTAUDIO_D}, 1)
CFLAGS +=-DHAVE_PORTAUDIO
drvr_src +=drvr/portaudio.c
endif
" >> Makefile
echo -e "ifeq (\${SOUNDIO_D}, on)
CFLAGS += -DHAVE_SOUNDIO
drvr_src += drvr/soundio.c
else ifeq (\${SOUNDIO_D}, 1)
CFLAGS +=-DHAVE_SOUNDIO
drvr_src +=drvr/soundio.c
endif
" >> Makefile
echo "# add boolean" >> Makefile
echo -e "ifeq (\${USE_COVERAGE}, on)
CFLAGS += -ftest-coverage -fprofile-arcs
endif" >> Makefile
echo -e "ifeq (\${USE_COVERAGE}, 1)
CFLAGS += -ftest-coverage -fprofile-arcs
endif" >> Makefile
echo -e "ifeq (\${USE_COVERAGE}, on)
LDFLAGS += --coverage
endif" >> Makefile
echo -e "ifeq (\${USE_COVERAGE}, 1)
LDFLAGS += --coverage
endif" >> Makefile
echo -e "ifeq (\${USE_MEMCHECK}, on)
CFLAGS += -g
endif" >> Makefile
echo -e "ifeq (\${USE_MEMCHECK}, 1)
CFLAGS += -g
endif" >> Makefile
echo -e "ifeq (\${USE_DOUBLE}, on)
CFLAGS += -DUSE_DOUBLE -DSPFLOAT=double
else ifeq (\${USE_DOUBLE}, 1)
CFLAGS +=-DUSE_DOUBLE -DSPFLOAT=double
else
CFLAGS+=-DSPFLOAT=float
endif
" >> Makefile
echo "# add definitions" >> Makefile
echo 'CFLAGS+= -DD_FUNC=dummy_driver' >> Makefile
echo "# add directories" >> Makefile
echo 'CFLAGS+= -DGWION_API_DIR="$\{GWION_API_DIR\}"' >> Makefile
echo 'CFLAGS+= -DGWION_DOC_DIR="$\{GWION_DOC_DIR\}"' >> Makefile
echo 'CFLAGS+= -DGWION_TAG_DIR="$\{GWION_TAG_DIR\}"' >> Makefile
echo 'CFLAGS+= -DGWION_TOK_DIR="$\{GWION_TOK_DIR\}"' >> Makefile
echo 'CFLAGS+= -DGWION_ADD_DIR="$\{GWION_ADD_DIR\}"' >> Makefile
echo "# add debug flags" >> Makefile
echo -e "ifeq (\${DEBUG_COMPILE}, on)
CFLAGS += -DDEBUG_COMPILE
endif" >> Makefile
echo -e "ifeq (\${DEBUG_COMPILE}, 1)
CFLAGS += -DDEBUG_COMPILE
endif" >> Makefile
echo -e "ifeq (\${DEBUG_OPERATOR}, on)
CFLAGS += -DDEBUG_OPERATOR
endif" >> Makefile
echo -e "ifeq (\${DEBUG_OPERATOR}, 1)
CFLAGS += -DDEBUG_OPERATOR
endif" >> Makefile
echo -e "ifeq (\${DEBUG_TYPE}, on)
CFLAGS += -DDEBUG_TYPE
endif" >> Makefile
echo -e "ifeq (\${DEBUG_TYPE}, 1)
CFLAGS += -DDEBUG_TYPE
endif" >> Makefile
echo -e "ifeq (\${DEBUG_SCAN0}, on)
CFLAGS += -DDEBUG_SCAN0
endif" >> Makefile
echo -e "ifeq (\${DEBUG_SCAN0}, 1)
CFLAGS += -DDEBUG_SCAN0
endif" >> Makefile
echo -e "ifeq (\${DEBUG_SCAN1}, on)
CFLAGS += -DDEBUG_SCAN1
endif" >> Makefile
echo -e "ifeq (\${DEBUG_SCAN1}, 1)
CFLAGS += -DDEBUG_SCAN1
endif" >> Makefile
echo -e "ifeq (\${DEBUG_SCAN2}, on)
CFLAGS += -DDEBUG_SCAN2
endif" >> Makefile
echo -e "ifeq (\${DEBUG_SCAN2}, 1)
CFLAGS += -DDEBUG_SCAN2
endif" >> Makefile
echo -e "ifeq (\${DEBUG_EMIT}, on)
CFLAGS += -DDEBUG_EMIT
endif" >> Makefile
echo -e "ifeq (\${DEBUG_EMIT}, 1)
CFLAGS += -DDEBUG_EMIT
endif" >> Makefile
echo -e "ifeq (\${DEBUG_VM}, on)
CFLAGS += -DDEBUG_VM
endif" >> Makefile
echo -e "ifeq (\${DEBUG_VM}, 1)
CFLAGS += -DDEBUG_VM
endif" >> Makefile
echo -e "ifeq (\${DEBUG_INSTR}, on)
CFLAGS += -DDEBUG_INSTR
endif" >> Makefile
echo -e "ifeq (\${DEBUG_INSTR}, 1)
CFLAGS += -DDEBUG_INSTR
endif" >> Makefile
echo -e "ifeq (\${DEBUG_SHREDULER}, on)
CFLAGS += -DDEBUG_SHREDULER
endif" >> Makefile
echo -e "ifeq (\${DEBUG_SHREDULER}, 1)
CFLAGS += -DDEBUG_SHREDULER
endif" >> Makefile
echo -e "ifeq (\${DEBUG_STACK}, on)
CFLAGS += -DDEBUG_STACK
endif" >> Makefile
echo -e "ifeq (\${DEBUG_STACK}, 1)
CFLAGS += -DDEBUG_STACK
endif" >> Makefile
echo "# add soundpipe" >> Makefile
echo -e "LDFLAGS+=\${SOUNDPIPE_LIB}" >> Makefile
echo -e "CFLAGS+=\${SOUNDPIPE_INC}" >> Makefile
echo "# os specific" >> Makefile
# initialize object lists
echo '' >> Makefile
echo '# initialize object lists' >> Makefile
for tgt in "core" "lang" "ugen" "drvr" "eval"
do echo "${tgt}_obj := \$(${tgt}_src:.c=.o)" >> Makefile
done

###########
# recipes #
###########
cat << EOF >> Makefile

# if any debug flag is set, we need -DDEBUG
ifeq (\$(findstring DEBUG,\$(CFLAGS)), DEBUG)
DEBUG = 1
endif

ifeq (\${DEBUG}, 1)
CFLAGS+=-DDEBUG
endif

LDFLAGS+=-lsndfile

# os specific
ifeq (\$(shell uname), Linux)
LDFLAGS+=-lrt
endif

# recipes
all: \${core_obj} \${lang_obj} \${eval_obj} \${ugen_obj} \${drvr_obj}
	\${CC} \${core_obj} \${lang_obj} \${eval_obj} \${ugen_obj} \${drvr_obj} \${LDFLAGS} -o \${PRG}

clean:
	@rm -f */*.o ${PRG}

.c.o:
	\${CC} \${CFLAGS} -c \$< -o \$(<:.c=.o)

install:
	@echo "'gwion' is in pre-alpha stage, no install for now."

uninstall:
	@echo "'gwion' is in pre-alpha stage, no install for now."

test:
	@(bash -c "source util/test.sh; do_test async=2 examples tests/error tests/tree tests/sh tests/bug & wait")
# keep soundpipe.c here for now
#	cp ugen/soundpipe.c .
EOF

# ] <-- needed because of Argbash
