# ARG_OPTIONAL_SINGLE([prg],[],[value for PRG],[gwion])
# ARG_OPTIONAL_SINGLE([cc],[],[value for CC],[gcc])
# ARG_OPTIONAL_SINGLE([yacc],[],[value for YACC],[yacc])
# ARG_OPTIONAL_SINGLE([lex],[],[value for LEX],[flex])
# ARG_OPTIONAL_SINGLE([data],[],[value for DATA],[../Soundpipe/modules/data])
# ARG_OPTIONAL_SINGLE([prefix],[],[value for PREFIX],[/usr/local])
# ARG_OPTIONAL_SINGLE([soundpipe_lib],[],[value for SOUNDPIPE_LIB],[-lsoundpipe])
# ARG_OPTIONAL_SINGLE([soundpipe_inc],[],[value for SOUNDPIPE_INC],[])
# ARG_OPTIONAL_BOOLEAN([double],[],[debug double],[on])
# ARG_OPTIONAL_BOOLEAN([coverage],[],[debug coverage],[off])
# ARG_OPTIONAL_BOOLEAN([memcheck],[],[debug memcheck],[off])
# ARG_OPTIONAL_SINGLE([d_func],[],[debug d_func],[dummy])
# ARG_OPTIONAL_BOOLEAN([dummy],[],[enable dummy],[on])
# ARG_OPTIONAL_REPEATED([dummy-inc],[],[Directories where to look for include files for dummy],[])
# ARG_OPTIONAL_SINGLE([dummy-lib],[],[dummy library],[])
# ARG_OPTIONAL_BOOLEAN([spa],[],[enable spa],[off])
# ARG_OPTIONAL_REPEATED([spa-inc],[],[Directories where to look for include files for spa],[])
# ARG_OPTIONAL_SINGLE([spa-lib],[],[spa library],[])
# ARG_OPTIONAL_BOOLEAN([sndfile],[],[enable sndfile],[on])
# ARG_OPTIONAL_REPEATED([sndfile-inc],[],[Directories where to look for include files for sndfile],['/usr/include' '/usr/local/include'])
# ARG_OPTIONAL_SINGLE([sndfile-lib],[],[sndfile library],[-lsndfile])
# ARG_OPTIONAL_BOOLEAN([alsa],[],[enable alsa],[on])
# ARG_OPTIONAL_REPEATED([alsa-inc],[],[Directories where to look for include files for alsa],[])
# ARG_OPTIONAL_SINGLE([alsa-lib],[],[alsa library],[-lasound])
# ARG_OPTIONAL_BOOLEAN([jack],[],[enable jack],[off])
# ARG_OPTIONAL_REPEATED([jack-inc],[],[Directories where to look for include files for jack],[])
# ARG_OPTIONAL_SINGLE([jack-lib],[],[jack library],[])
# ARG_OPTIONAL_BOOLEAN([portaudio],[],[enable portaudio],[off])
# ARG_OPTIONAL_REPEATED([portaudio-inc],[],[Directories where to look for include files for portaudio],[])
# ARG_OPTIONAL_SINGLE([portaudio-lib],[],[portaudio library],[])
# ARG_OPTIONAL_BOOLEAN([soundio],[],[enable soundio],[off])
# ARG_OPTIONAL_REPEATED([soundio-inc],[],[Directories where to look for include files for soundio],[])
# ARG_OPTIONAL_SINGLE([soundio-lib],[],[soundio library],[])
# ARG_OPTIONAL_SINGLE([api],[],[api path],[api])
# ARG_OPTIONAL_SINGLE([doc],[],[doc path],[doc])
# ARG_OPTIONAL_SINGLE([tag],[],[tag path],[tag])
# ARG_OPTIONAL_SINGLE([tok],[],[tok path],[tok])
# ARG_OPTIONAL_SINGLE([add],[],[add path],[add])
# ARG_OPTIONAL_BOOLEAN([debug-compile],[],[debug compile],[off])
# ARG_OPTIONAL_BOOLEAN([debug-operator],[],[debug operator],[off])
# ARG_OPTIONAL_BOOLEAN([debug-type],[],[debug type],[off])
# ARG_OPTIONAL_BOOLEAN([debug-scan0],[],[debug scan0],[off])
# ARG_OPTIONAL_BOOLEAN([debug-scan1],[],[debug scan1],[off])
# ARG_OPTIONAL_BOOLEAN([debug-scan2],[],[debug scan2],[off])
# ARG_OPTIONAL_BOOLEAN([debug-emit],[],[debug emit],[off])
# ARG_OPTIONAL_BOOLEAN([debug-vm],[],[debug vm],[off])
# ARG_OPTIONAL_BOOLEAN([debug-instr],[],[debug instr],[off])
# ARG_OPTIONAL_BOOLEAN([debug-shreduler],[],[debug shreduler],[off])
# ARG_OPTIONAL_BOOLEAN([debug-stack],[],[debug stack],[off])
# ARG_HELP([The general script's help msg])
# ARGBASH_GO()
# needed because of Argbash --> m4_ignore([
### START OF CODE GENERATED BY Argbash v2.3.0 one line above ###
# Argbash is a bash code generator used to get arguments parsing right.
# Argbash is FREE SOFTWARE, see https://argbash.io for more info

die()
{
	local _ret=$2
	test -n "$_ret" || _ret=1
	test "$_PRINT_HELP" = yes && print_help >&2
	echo "$1" >&2
	exit ${_ret}
}

# THE DEFAULTS INITIALIZATION - OPTIONALS
: ${PRG:="gwion"}
: ${_arg_prg:="$PRG"}
: ${CC:="gcc"}
: ${_arg_cc:="$CC"}
: ${YACC:="yacc"}
: ${_arg_yacc:="$YACC"}
: ${LEX:="flex"}
: ${_arg_lex:="$LEX"}
: ${DATA:="../Soundpipe/modules/data"}
: ${_arg_data:="$DATA"}
: ${PREFIX:="/usr/local"}
: ${_arg_prefix:="$PREFIX"}
: ${SOUNDPIPE_LIB:="-lsoundpipe"}
: ${_arg_soundpipe_lib:="$SOUNDPIPE_LIB"}
: ${SOUNDPIPE_INC:=}
: ${_arg_soundpipe_inc:="$SOUNDPIPE_INC"}
_arg_double=on
_arg_coverage=off
_arg_memcheck=off
_arg_d_func="dummy"
: ${DUMMY_D:=on}
: ${_arg_dummy:="$DUMMY_D"}
_arg_dummy_inc=()
: ${DUMMY_LIB:= }
: ${_arg_dummy_lib:="$DUMMY_LIB"}
: ${SPA_D:=off}
: ${_arg_spa:="$SPA_D"}
_arg_spa_inc=()
: ${SPA_LIB:= }
: ${_arg_spa_lib:="$SPA_LIB"}
: ${SNDFILE_D:=on}
: ${_arg_sndfile:="$SNDFILE_D"}
: ${SNDFILE_INC:='/usr/include' '/usr/local/include'}
: ${_arg_sndfile_inc:="$SNDFILE_INC"}
: ${SNDFILE_LIB:="-lsndfile" }
: ${_arg_sndfile_lib:="$SNDFILE_LIB"}
: ${ALSA_D:=on}
: ${_arg_alsa:="$ALSA_D"}
_arg_alsa_inc=()
: ${ALSA_LIB:="-lasound" }
: ${_arg_alsa_lib:="$ALSA_LIB"}
: ${JACK_D:=off}
: ${_arg_jack:="$JACK_D"}
_arg_jack_inc=()
: ${JACK_LIB:= }
: ${_arg_jack_lib:="$JACK_LIB"}
: ${PORTAUDIO_D:=off}
: ${_arg_portaudio:="$PORTAUDIO_D"}
_arg_portaudio_inc=()
: ${PORTAUDIO_LIB:= }
: ${_arg_portaudio_lib:="$PORTAUDIO_LIB"}
: ${SOUNDIO_D:=off}
: ${_arg_soundio:="$SOUNDIO_D"}
_arg_soundio_inc=()
: ${SOUNDIO_LIB:= }
: ${_arg_soundio_lib:="$SOUNDIO_LIB"}
: ${API_DIR:=""api""}
: ${_arg_api:="$API_DIR"}
: ${DOC_DIR:=""doc""}
: ${_arg_doc:="$DOC_DIR"}
: ${TAG_DIR:=""tag""}
: ${_arg_tag:="$TAG_DIR"}
: ${TOK_DIR:=""tok""}
: ${_arg_tok:="$TOK_DIR"}
: ${ADD_DIR:=""add""}
: ${_arg_add:="$ADD_DIR"}
: ${DEBUG_COMPILE:="off"}
: ${_arg_debug_compile:="$DEBUG_COMPILE"}
: ${DEBUG_OPERATOR:="off"}
: ${_arg_debug_operator:="$DEBUG_OPERATOR"}
: ${DEBUG_TYPE:="off"}
: ${_arg_debug_type:="$DEBUG_TYPE"}
: ${DEBUG_SCAN0:="off"}
: ${_arg_debug_scan0:="$DEBUG_SCAN0"}
: ${DEBUG_SCAN1:="off"}
: ${_arg_debug_scan1:="$DEBUG_SCAN1"}
: ${DEBUG_SCAN2:="off"}
: ${_arg_debug_scan2:="$DEBUG_SCAN2"}
: ${DEBUG_EMIT:="off"}
: ${_arg_debug_emit:="$DEBUG_EMIT"}
: ${DEBUG_VM:="off"}
: ${_arg_debug_vm:="$DEBUG_VM"}
_arg_debug_instr=off
_arg_debug_shreduler=off
_arg_debug_stack=off

print_help ()
{
	echo "The general script's help msg"
	printf 'Usage: %s [--prg <arg>] [--cc <arg>] [--yacc <arg>] [--lex <arg>] [--data <arg>] [--prefix <arg>] [--soundpipe_lib <arg>] [--soundpipe_inc <arg>] [--(no-)double] [--(no-)coverage] [--(no-)memcheck] [--d_func <arg>] [--(no-)dummy] [--dummy-inc <arg>] [--dummy-lib <arg>] [--(no-)spa] [--spa-inc <arg>] [--spa-lib <arg>] [--(no-)sndfile] [--sndfile-inc <arg>] [--sndfile-lib <arg>] [--(no-)alsa] [--alsa-inc <arg>] [--alsa-lib <arg>] [--(no-)jack] [--jack-inc <arg>] [--jack-lib <arg>] [--(no-)portaudio] [--portaudio-inc <arg>] [--portaudio-lib <arg>] [--(no-)soundio] [--soundio-inc <arg>] [--soundio-lib <arg>] [--api <arg>] [--doc <arg>] [--tag <arg>] [--tok <arg>] [--add <arg>] [--(no-)debug-compile] [--(no-)debug-operator] [--(no-)debug-type] [--(no-)debug-scan0] [--(no-)debug-scan1] [--(no-)debug-scan2] [--(no-)debug-emit] [--(no-)debug-vm] [--(no-)debug-instr] [--(no-)debug-shreduler] [--(no-)debug-stack] [-h|--help]\n' "$0"
	printf "\t%s\n" "--prg: value for PRG (default: '"gwion"')"
	printf "\t%s\n" "--cc: value for CC (default: '"gcc"')"
	printf "\t%s\n" "--yacc: value for YACC (default: '"yacc"')"
	printf "\t%s\n" "--lex: value for LEX (default: '"flex"')"
	printf "\t%s\n" "--data: value for DATA (default: '"../Soundpipe/modules/data"')"
	printf "\t%s\n" "--prefix: value for PREFIX (default: '"/usr/local"')"
	printf "\t%s\n" "--soundpipe_lib: value for SOUNDPIPE_LIB (default: '"-lsoundpipe"')"
	printf "\t%s\n" "--soundpipe_inc: value for SOUNDPIPE_INC (no default)"
	printf "\t%s\n" "--double,--no-double: debug double (on by default)"
	printf "\t%s\n" "--coverage,--no-coverage: debug coverage (off by default)"
	printf "\t%s\n" "--memcheck,--no-memcheck: debug memcheck (off by default)"
	printf "\t%s\n" "--d_func: debug d_func (default: '"dummy"')"
	printf "\t%s\n" "--dummy,--no-dummy: enable dummy (on by default)"
	printf "\t%s\n" "--dummy-inc: Directories where to look for include files for dummy (empty by default)"
	printf "\t%s\n" "--dummy-lib: dummy library (no default)"
	printf "\t%s\n" "--spa,--no-spa: enable spa (off by default)"
	printf "\t%s\n" "--spa-inc: Directories where to look for include files for spa (empty by default)"
	printf "\t%s\n" "--spa-lib: spa library (no default)"
	printf "\t%s\n" "--sndfile,--no-sndfile: enable sndfile (on by default)"
	printf "\t%s\n" "--sndfile-inc: Directories where to look for include files for sndfile (default array: ('/usr/include' '/usr/local/include') )"
	printf "\t%s\n" "--sndfile-lib: sndfile library (default: '"-lsndfile"')"
	printf "\t%s\n" "--alsa,--no-alsa: enable alsa (on by default)"
	printf "\t%s\n" "--alsa-inc: Directories where to look for include files for alsa (empty by default)"
	printf "\t%s\n" "--alsa-lib: alsa library (default: '"-lasound"')"
	printf "\t%s\n" "--jack,--no-jack: enable jack (off by default)"
	printf "\t%s\n" "--jack-inc: Directories where to look for include files for jack (empty by default)"
	printf "\t%s\n" "--jack-lib: jack library (no default)"
	printf "\t%s\n" "--portaudio,--no-portaudio: enable portaudio (off by default)"
	printf "\t%s\n" "--portaudio-inc: Directories where to look for include files for portaudio (empty by default)"
	printf "\t%s\n" "--portaudio-lib: portaudio library (no default)"
	printf "\t%s\n" "--soundio,--no-soundio: enable soundio (off by default)"
	printf "\t%s\n" "--soundio-inc: Directories where to look for include files for soundio (empty by default)"
	printf "\t%s\n" "--soundio-lib: soundio library (no default)"
	printf "\t%s\n" "--api: api path (default: '"api"')"
	printf "\t%s\n" "--doc: doc path (default: '"doc"')"
	printf "\t%s\n" "--tag: tag path (default: '"tag"')"
	printf "\t%s\n" "--tok: tok path (default: '"tok"')"
	printf "\t%s\n" "--add: add path (default: '"add"')"
	printf "\t%s\n" "--debug-compile,--no-debug-compile: debug compile (off by default)"
	printf "\t%s\n" "--debug-operator,--no-debug-operator: debug operator (off by default)"
	printf "\t%s\n" "--debug-type,--no-debug-type: debug type (off by default)"
	printf "\t%s\n" "--debug-scan0,--no-debug-scan0: debug scan0 (off by default)"
	printf "\t%s\n" "--debug-scan1,--no-debug-scan1: debug scan1 (off by default)"
	printf "\t%s\n" "--debug-scan2,--no-debug-scan2: debug scan2 (off by default)"
	printf "\t%s\n" "--debug-emit,--no-debug-emit: debug emit (off by default)"
	printf "\t%s\n" "--debug-vm,--no-debug-vm: debug vm (off by default)"
	printf "\t%s\n" "--debug-instr,--no-debug-instr: debug instr (off by default)"
	printf "\t%s\n" "--debug-shreduler,--no-debug-shreduler: debug shreduler (off by default)"
	printf "\t%s\n" "--debug-stack,--no-debug-stack: debug stack (off by default)"
	printf "\t%s\n" "-h,--help: Prints help"
}

# THE PARSING ITSELF
while test $# -gt 0
do
	_key="$1"
	case "$_key" in
		--prg|--prg=*)
			_val="${_key##--prg=}"
			if test "$_val" = "$_key"
			then
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_val="$2"
				shift
			fi
			_arg_prg="$_val"
			;;
		--cc|--cc=*)
			_val="${_key##--cc=}"
			if test "$_val" = "$_key"
			then
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_val="$2"
				shift
			fi
			_arg_cc="$_val"
			;;
		--yacc|--yacc=*)
			_val="${_key##--yacc=}"
			if test "$_val" = "$_key"
			then
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_val="$2"
				shift
			fi
			_arg_yacc="$_val"
			;;
		--lex|--lex=*)
			_val="${_key##--lex=}"
			if test "$_val" = "$_key"
			then
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_val="$2"
				shift
			fi
			_arg_lex="$_val"
			;;
		--data|--data=*)
			_val="${_key##--data=}"
			if test "$_val" = "$_key"
			then
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_val="$2"
				shift
			fi
			_arg_data="$_val"
			;;
		--prefix|--prefix=*)
			_val="${_key##--prefix=}"
			if test "$_val" = "$_key"
			then
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_val="$2"
				shift
			fi
			_arg_prefix="$_val"
			;;
		--soundpipe_lib|--soundpipe_lib=*)
			_val="${_key##--soundpipe_lib=}"
			if test "$_val" = "$_key"
			then
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_val="$2"
				shift
			fi
			_arg_soundpipe_lib="$_val"
			;;
		--soundpipe_inc|--soundpipe_inc=*)
			_val="${_key##--soundpipe_inc=}"
			if test "$_val" = "$_key"
			then
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_val="$2"
				shift
			fi
			_arg_soundpipe_inc="$_val"
			;;
		--no-double|--double)
			_arg_double="on"
			test "${1:0:5}" = "--no-" && _arg_double="off"
			;;
		--no-coverage|--coverage)
			_arg_coverage="on"
			test "${1:0:5}" = "--no-" && _arg_coverage="off"
			;;
		--no-memcheck|--memcheck)
			_arg_memcheck="on"
			test "${1:0:5}" = "--no-" && _arg_memcheck="off"
			;;
		--d_func|--d_func=*)
			_val="${_key##--d_func=}"
			if test "$_val" = "$_key"
			then
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_val="$2"
				shift
			fi
			_arg_d_func="$_val"
			;;
		--no-dummy|--dummy)
			_arg_dummy="on"
			test "${1:0:5}" = "--no-" && _arg_dummy="off"
			;;
		--dummy-inc|--dummy-inc=*)
			_val="${_key##--dummy-inc=}"
			if test "$_val" = "$_key"
			then
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_val="$2"
				shift
			fi
			_arg_dummy_inc+=("$_val")
			;;
		--dummy-lib|--dummy-lib=*)
			_val="${_key##--dummy-lib=}"
			if test "$_val" = "$_key"
			then
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_val="$2"
				shift
			fi
			_arg_dummy_lib="$_val"
			;;
		--no-spa|--spa)
			_arg_spa="on"
			test "${1:0:5}" = "--no-" && _arg_spa="off"
			;;
		--spa-inc|--spa-inc=*)
			_val="${_key##--spa-inc=}"
			if test "$_val" = "$_key"
			then
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_val="$2"
				shift
			fi
			_arg_spa_inc+=("$_val")
			;;
		--spa-lib|--spa-lib=*)
			_val="${_key##--spa-lib=}"
			if test "$_val" = "$_key"
			then
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_val="$2"
				shift
			fi
			_arg_spa_lib="$_val"
			;;
		--no-sndfile|--sndfile)
			_arg_sndfile="on"
			test "${1:0:5}" = "--no-" && _arg_sndfile="off"
			;;
		--sndfile-inc|--sndfile-inc=*)
			_val="${_key##--sndfile-inc=}"
			if test "$_val" = "$_key"
			then
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_val="$2"
				shift
			fi
			_arg_sndfile_inc+=("$_val")
			;;
		--sndfile-lib|--sndfile-lib=*)
			_val="${_key##--sndfile-lib=}"
			if test "$_val" = "$_key"
			then
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_val="$2"
				shift
			fi
			_arg_sndfile_lib="$_val"
			;;
		--no-alsa|--alsa)
			_arg_alsa="on"
			test "${1:0:5}" = "--no-" && _arg_alsa="off"
			;;
		--alsa-inc|--alsa-inc=*)
			_val="${_key##--alsa-inc=}"
			if test "$_val" = "$_key"
			then
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_val="$2"
				shift
			fi
			_arg_alsa_inc+=("$_val")
			;;
		--alsa-lib|--alsa-lib=*)
			_val="${_key##--alsa-lib=}"
			if test "$_val" = "$_key"
			then
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_val="$2"
				shift
			fi
			_arg_alsa_lib="$_val"
			;;
		--no-jack|--jack)
			_arg_jack="on"
			test "${1:0:5}" = "--no-" && _arg_jack="off"
			;;
		--jack-inc|--jack-inc=*)
			_val="${_key##--jack-inc=}"
			if test "$_val" = "$_key"
			then
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_val="$2"
				shift
			fi
			_arg_jack_inc+=("$_val")
			;;
		--jack-lib|--jack-lib=*)
			_val="${_key##--jack-lib=}"
			if test "$_val" = "$_key"
			then
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_val="$2"
				shift
			fi
			_arg_jack_lib="$_val"
			;;
		--no-portaudio|--portaudio)
			_arg_portaudio="on"
			test "${1:0:5}" = "--no-" && _arg_portaudio="off"
			;;
		--portaudio-inc|--portaudio-inc=*)
			_val="${_key##--portaudio-inc=}"
			if test "$_val" = "$_key"
			then
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_val="$2"
				shift
			fi
			_arg_portaudio_inc+=("$_val")
			;;
		--portaudio-lib|--portaudio-lib=*)
			_val="${_key##--portaudio-lib=}"
			if test "$_val" = "$_key"
			then
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_val="$2"
				shift
			fi
			_arg_portaudio_lib="$_val"
			;;
		--no-soundio|--soundio)
			_arg_soundio="on"
			test "${1:0:5}" = "--no-" && _arg_soundio="off"
			;;
		--soundio-inc|--soundio-inc=*)
			_val="${_key##--soundio-inc=}"
			if test "$_val" = "$_key"
			then
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_val="$2"
				shift
			fi
			_arg_soundio_inc+=("$_val")
			;;
		--soundio-lib|--soundio-lib=*)
			_val="${_key##--soundio-lib=}"
			if test "$_val" = "$_key"
			then
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_val="$2"
				shift
			fi
			_arg_soundio_lib="$_val"
			;;
		--api|--api=*)
			_val="${_key##--api=}"
			if test "$_val" = "$_key"
			then
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_val="$2"
				shift
			fi
			_arg_api="$_val"
			;;
		--doc|--doc=*)
			_val="${_key##--doc=}"
			if test "$_val" = "$_key"
			then
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_val="$2"
				shift
			fi
			_arg_doc="$_val"
			;;
		--tag|--tag=*)
			_val="${_key##--tag=}"
			if test "$_val" = "$_key"
			then
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_val="$2"
				shift
			fi
			_arg_tag="$_val"
			;;
		--tok|--tok=*)
			_val="${_key##--tok=}"
			if test "$_val" = "$_key"
			then
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_val="$2"
				shift
			fi
			_arg_tok="$_val"
			;;
		--add|--add=*)
			_val="${_key##--add=}"
			if test "$_val" = "$_key"
			then
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_val="$2"
				shift
			fi
			_arg_add="$_val"
			;;
		--no-debug-compile|--debug-compile)
			_arg_debug_compile="on"
			test "${1:0:5}" = "--no-" && _arg_debug_compile="off"
			;;
		--no-debug-operator|--debug-operator)
			_arg_debug_operator="on"
			test "${1:0:5}" = "--no-" && _arg_debug_operator="off"
			;;
		--no-debug-type|--debug-type)
			_arg_debug_type="on"
			test "${1:0:5}" = "--no-" && _arg_debug_type="off"
			;;
		--no-debug-scan0|--debug-scan0)
			_arg_debug_scan0="on"
			test "${1:0:5}" = "--no-" && _arg_debug_scan0="off"
			;;
		--no-debug-scan1|--debug-scan1)
			_arg_debug_scan1="on"
			test "${1:0:5}" = "--no-" && _arg_debug_scan1="off"
			;;
		--no-debug-scan2|--debug-scan2)
			_arg_debug_scan2="on"
			test "${1:0:5}" = "--no-" && _arg_debug_scan2="off"
			;;
		--no-debug-emit|--debug-emit)
			_arg_debug_emit="on"
			test "${1:0:5}" = "--no-" && _arg_debug_emit="off"
			;;
		--no-debug-vm|--debug-vm)
			_arg_debug_vm="on"
			test "${1:0:5}" = "--no-" && _arg_debug_vm="off"
			;;
		--no-debug-instr|--debug-instr)
			_arg_debug_instr="on"
			test "${1:0:5}" = "--no-" && _arg_debug_instr="off"
			;;
		--no-debug-shreduler|--debug-shreduler)
			_arg_debug_shreduler="on"
			test "${1:0:5}" = "--no-" && _arg_debug_shreduler="off"
			;;
		--no-debug-stack|--debug-stack)
			_arg_debug_stack="on"
			test "${1:0:5}" = "--no-" && _arg_debug_stack="off"
			;;
		-h|--help)
			print_help
			exit 0
			;;
		*)
			_PRINT_HELP=yes die "FATAL ERROR: Got an unexpected argument '$1'" 1
			;;
	esac
	shift
done

# OTHER STUFF GENERATED BY Argbash

### END OF CODE GENERATED BY Argbash (sortof) ### ])
# [ <-- needed because of Argbash
[ -f Makefile  ] && rm Makefile
