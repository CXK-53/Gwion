# ARG_HELP([The general script's help msg])
# ARGBASH_GO()
# needed because of Argbash --> m4_ignore([
### START OF CODE GENERATED BY Argbash v2.3.0 one line above ###
# Argbash is a bash code generator used to get arguments parsing right.
# Argbash is FREE SOFTWARE, see https://argbash.io for more info

die()
{
	local _ret=$2
	test -n "$_ret" || _ret=1
	test "$_PRINT_HELP" = yes && print_help >&2
	echo "$1" >&2
	exit ${_ret}
}

# THE DEFAULTS INITIALIZATION - OPTIONALS

print_help ()
{
	echo "The general script's help msg"
	printf 'Usage: %s [-h|--help]\n' "$0"
	printf "\t%s\n" "-h,--help: Prints help"
}

# THE PARSING ITSELF
while test $# -gt 0
do
	_key="$1"
	case "$_key" in
		-h|--help)
			print_help
			exit 0
			;;
		*)
			_PRINT_HELP=yes die "FATAL ERROR: Got an unexpected argument '$1'" 1
			;;
	esac
	shift
done

# OTHER STUFF GENERATED BY Argbash

### END OF CODE GENERATED BY Argbash (sortof) ### ])
# [ <-- needed because of Argbash
[ -f Makefile  ] && rm Makefile
set -e 
if [ "$_arg_double" = "on" ];then _CFLAGS+=" -DUSE_DOUBLE -DSPFLOAT=double";fi
if [ "$_arg_double" = "1"  ];then _CFLAGS+=" -DUSE_DOUBLE -DSPFLOAT=double";fi
([ "$_arg_double" = "on" ] || [ "$_arg_double" = "1"  ]) && _CFLAGS+=" -DSPFLOAT=float"
echo $_arg_cc -Iinclude $_arg_soundpipe_inc -DDEBUG $_arg_cflags $_CFLAGS util/generate_header.c core/err_msg.c -o util/generate_header
$_arg_cc -Iinclude $_arg_soundpipe_inc -DDEBUG $_arg_cflags $_CFLAGS util/generate_header.c core/err_msg.c -o util/generate_header || (echo 'invalid compilation options'; exit 1;)
echo generate header
./util/generate_header || exit 1
echo generate parser
$_arg_yacc -o eval/parser.c -dv eval/gwion.y -x || exit 1
echo generate lexer
$_arg_lex -o eval/lexer.c eval/gwion.l || exit 1
echo generate soundpipe wrapper
lua util/import.lua $_arg_data > ugen/soundpipe.c || exit 1
# handle options
echo "# handle options" >> Makefile

cat <<  EOF >> Makefile

LDFLAGS += -lm -ldl -rdynamic -lpthread
CFLAGS += -Iinclude -std=c99 -O3 -mfpmath=sse -mtune=native -fno-strict-aliasing -Wall -pedantic -D_GNU_SOURCE

EOF
# handle boolean options
echo "# handle boolean options" >> Makefile
# handle definitions
echo "# handle definitions" >> Makefile
# handle directories
echo "# handle directories" >> Makefile
# handle libraries
echo "# handle libraries" >> Makefile
# handle debug
echo "# handle debug" >> Makefile
echo '' >> Makefile
echo '# initialize source lists' >> Makefile
for tgt in "core" "lang" "ugen" "eval"
do echo "${tgt}_src := \$(wildcard ${tgt}/*.c)" >> Makefile
done
echo 'drvr_src := drvr/driver.c' >> Makefile
echo -e "\n# add libraries" >> Makefile
echo "# add boolean" >> Makefile
echo "# add definitions" >> Makefile
echo "# add directories" >> Makefile
echo "# add debug flags" >> Makefile
echo "# add soundpipe" >> Makefile
echo -e 'LDFLAGS+=${SOUNDPIPE_LIB}' >> Makefile
echo -e 'CFLAGS+=${SOUNDPIPE_INC}' >> Makefile
echo "# os specific" >> Makefile
[ Linux = "Linux" ] && echo "LDFLAGS+=-lrt" >> Makefile
# initialize object lists
echo '' >> Makefile
echo '# initialize object lists' >> Makefile
for tgt in "core" "lang" "ugen" "drvr" "eval"
do echo "${tgt}_obj := \$(${tgt}_src:.c=.o)" >> Makefile
done

###########
# recipes #
###########
cat << EOF >> Makefile

# if any debug flag is set, we need -DDEBUG
ifeq (\$(findstring DEBUG,\$(CFLAGS)), DEBUG)
DEBUG = 1
endif

ifeq (\${DEBUG}, 1)
CFLAGS+=-DDEBUG
endif

# recipes
all: \${core_obj} \${lang_obj} \${eval_obj} \${ugen_obj} \${drvr_obj}
	\${CC} \${core_obj} \${lang_obj} \${eval_obj} \${ugen_obj} \${drvr_obj} \${LDFLAGS} -o \${PRG}

clean:
	@rm -f */*.o ${PRG}

.c.o:
	\${CC} \${CFLAGS} -c \$< -o \$(<:.c=.o)

install:
	@echo "'gwion' is in pre-alpha stage, no install for now."

uninstall:
	@echo "'gwion' is in pre-alpha stage, no install for now."

test:
	sh util/test.sh
EOF

# ] <-- needed because of Argbash
