  fft->sp = [01;31m[Kshred-[m[K>vm_ref->bbq->sp;
  ana->sr = [01;31m[Kshred-[m[K>vm_ref->bbq->sp->sr;
  ana->sp = [01;31m[Kshred-[m[K>vm_ref->bbq->sp;
  vector_add(&[01;31m[Kshred-[m[K>gc, (vtype)ret);
  *(M_Object*)[01;31m[Kshred-[m[K>reg = obj;
  *(M_Object*)[01;31m[Kshred-[m[K>reg = obj;
analys.c
  *(m_complex*)REG(0) = (**(m_complex**)[01;31m[Kshred-[m[K>reg = *(m_complex*)REG(SZ_INT));
  *(m_complex*)[01;31m[Kshred-[m[K>reg += *(m_complex*)REG(SZ_COMPLEX);
  *(m_complex*)[01;31m[Kshred-[m[K>reg -= *(m_complex*)REG(SZ_INT);
  *(m_complex*)[01;31m[Kshred-[m[K>reg *= *(m_complex*)REG(SZ_INT);
  *(m_complex*)[01;31m[Kshred-[m[K>reg /= *(m_complex*)REG(SZ_INT);
  **(m_complex**)REG(SZ_COMPLEX) = *(m_complex*)[01;31m[Kshred-[m[K>reg;
  *(m_complex*)REG(0) = (**(m_complex**)REG(SZ_COMPLEX) += (*(m_complex*)[01;31m[Kshred-[m[K>reg));
  *(m_complex*)REG(0) = (**(m_complex**)REG(SZ_COMPLEX) -= (*(m_complex*)[01;31m[Kshred-[m[K>reg));
  *(m_complex*)REG(0) = (**(m_complex**)REG(SZ_COMPLEX) *= (*(m_complex*)[01;31m[Kshred-[m[K>reg));
  *(m_complex*)REG(0) = (**(m_complex**)REG(SZ_COMPLEX) /= (*(m_complex*)[01;31m[Kshred-[m[K>reg));
//    *(m_float**)REG(0) = &**(m_float**)[01;31m[Kshred-[m[K>reg; // coverity
    *(m_float*)REG(0) = **(m_float**)[01;31m[Kshred-[m[K>reg;  // coverity
  *(m_complex*)[01;31m[Kshred-[m[K>reg = hypot(re, im) + atan2(im, re) * I;
  *(m_complex*)[01;31m[Kshred-[m[K>reg = hypot(re, im) + atan2(im, re) * I;
  *(m_complex*)[01;31m[Kshred-[m[K>reg = mag  + phase * I;
  *(m_complex*)[01;31m[Kshred-[m[K>reg = mag  + phase * I;
  *(m_complex*)[01;31m[Kshred-[m[K>reg = hypot(re, im) + atan2(im, re) * I;
  *(m_complex*)[01;31m[Kshred-[m[K>reg = hypot(re, im) + atan2(im, re) * I;
  *(m_complex*)[01;31m[Kshred-[m[K>reg = mag  + phase * I;
  *(m_complex*)[01;31m[Kshred-[m[K>reg = mag  + phase * I;
complex.c
  [01;31m[Kshred-[m[K>wake_time += *(m_float*)[01;31m[Kshred-[m[K>reg;
  [01;31m[Kshred-[m[K>is_running = 0;
  shredule(vm->shreduler, shred, [01;31m[Kshred-[m[K>wake_time);
  *(m_float*)[01;31m[Kshred-[m[K>reg = [01;31m[Kshred-[m[K>wake_time;
  event = *(M_Object*)[01;31m[Kshred-[m[K>reg;
  [01;31m[Kshred-[m[K>wait = event;
  [01;31m[Kshred-[m[K>next_pc++;
  *(m_int*)[01;31m[Kshred-[m[K>reg = 1;
  shredule([01;31m[Kshred-[m[K>vm_ref->shreduler, sh, get_now([01;31m[Kshred-[m[K>vm_ref->shreduler) + .5);
event.c
  M_Object o = **(M_Object**)[01;31m[Kshred-[m[K>reg;
  fprintf(IO_FILE(o), "%li", *(m_int*)([01;31m[Kshred-[m[K>reg - SZ_INT));
  *(M_Object*)([01;31m[Kshred-[m[K>reg - SZ_INT) = o;
  M_Object o = **(M_Object**)[01;31m[Kshred-[m[K>reg;
  o = **(M_Object**)[01;31m[Kshred-[m[K>reg;
  fprintf(IO_FILE(o), "%f", *(m_float*)([01;31m[Kshred-[m[K>reg - SZ_FLOAT));
  *(M_Object*)([01;31m[Kshred-[m[K>reg - SZ_INT) = o;
  M_Object o = **(M_Object**)[01;31m[Kshred-[m[K>reg;
  M_Object lhs = *(M_Object*)([01;31m[Kshred-[m[K>reg - SZ_INT);
  *(M_Object*)([01;31m[Kshred-[m[K>reg -SZ_INT)= o;
  M_Object o = **(M_Object**)[01;31m[Kshred-[m[K>reg;
  M_Object lhs = *(M_Object*)([01;31m[Kshred-[m[K>reg - SZ_INT);
  *(M_Object*)([01;31m[Kshred-[m[K>reg -SZ_INT)= o;
  M_Object o = *(M_Object*)([01;31m[Kshred-[m[K>reg - SZ_INT);
    *(m_uint*)([01;31m[Kshred-[m[K>reg - SZ_INT)= (**(m_uint**)REG(0) = ret);
  M_Object o = *(M_Object*)([01;31m[Kshred-[m[K>reg - SZ_INT);
    *(m_float*)([01;31m[Kshred-[m[K>reg - SZ_FLOAT) = (**(m_float**)REG(0) = ret);
  M_Object o    = *(M_Object*)([01;31m[Kshred-[m[K>reg - SZ_INT);
    *(M_Object*)([01;31m[Kshred-[m[K>reg - SZ_INT) = s;
  Type t = new_array_type([01;31m[Kshred-[m[K>vm_ref->env, 1, &t_string, [01;31m[Kshred-[m[K>vm_ref->env->curr);
  vector_add(&[01;31m[Kshred-[m[K>gc, (vtype)ret);
fileio.c
  *(m_float*)REG(0) = (**(m_float**)[01;31m[Kshred-[m[K>reg = *(m_float*)REG(SZ_INT));
  *(m_float*)[01;31m[Kshred-[m[K>reg += *(m_float*)REG(SZ_FLOAT);
  *(m_float*)[01;31m[Kshred-[m[K>reg -= *(m_float*)REG(SZ_FLOAT);
  *(m_float*)[01;31m[Kshred-[m[K>reg *= *(m_float*)REG(SZ_FLOAT);
  *(m_float*)[01;31m[Kshred-[m[K>reg /= *(m_float*)REG(SZ_FLOAT);
  *(m_int*)[01;31m[Kshred-[m[K>reg = (*(m_float*)[01;31m[Kshred-[m[K>reg && *(m_float*)REG(SZ_FLOAT));
  *(m_int*)[01;31m[Kshred-[m[K>reg = (*(m_float*)[01;31m[Kshred-[m[K>reg || *(m_float*)REG(SZ_FLOAT));
  *(m_int*)[01;31m[Kshred-[m[K>reg = (*(m_float*)[01;31m[Kshred-[m[K>reg == *(m_float*)REG(SZ_FLOAT));
  *(m_int*)[01;31m[Kshred-[m[K>reg = (*(m_float*)[01;31m[Kshred-[m[K>reg != *(m_float*)REG(SZ_FLOAT));
  *(m_int*)[01;31m[Kshred-[m[K>reg = (*(m_float*)[01;31m[Kshred-[m[K>reg > *(m_float*)REG(SZ_FLOAT));
  *(m_int*)[01;31m[Kshred-[m[K>reg = (*(m_float*)[01;31m[Kshred-[m[K>reg >= *(m_float*)REG(SZ_FLOAT));
  *(m_int*)[01;31m[Kshred-[m[K>reg = (*(m_float*)[01;31m[Kshred-[m[K>reg < * (m_float*)REG(SZ_FLOAT));
  *(m_int*)[01;31m[Kshred-[m[K>reg = (*(m_float*)[01;31m[Kshred-[m[K>reg <= *(m_float*)REG(SZ_FLOAT));
  *(m_float*)[01;31m[Kshred-[m[K>reg = -*(m_float*)[01;31m[Kshred-[m[K>reg;
  *(m_int*)[01;31m[Kshred-[m[K>reg = !*(m_float*)[01;31m[Kshred-[m[K>reg;
  **(m_float**)REG(SZ_FLOAT) = *(m_float*)[01;31m[Kshred-[m[K>reg;
  *(m_float*)REG(0) = (**(m_float**)REG(SZ_FLOAT) += (*(m_float*)[01;31m[Kshred-[m[K>reg));
  *(m_float*)REG(0) = (**(m_float**)REG(SZ_FLOAT) -= (*(m_float*)[01;31m[Kshred-[m[K>reg));
  *(m_float*)REG(0) = (**(m_float**)REG(SZ_FLOAT) *= (*(m_float*)[01;31m[Kshred-[m[K>reg));
  *(m_float*)REG(0) = (**(m_float**)REG(SZ_FLOAT) /= (*(m_float*)[01;31m[Kshred-[m[K>reg));
  *(m_int*)REG(0) = (**(m_int**)[01;31m[Kshred-[m[K>reg = *(m_float*)REG(SZ_INT));
  *(m_float*)[01;31m[Kshred-[m[K>reg = *(m_int*)[01;31m[Kshred-[m[K>reg + *(m_float*)REG(SZ_INT);
  *(m_float*)[01;31m[Kshred-[m[K>reg = *(m_int*)[01;31m[Kshred-[m[K>reg + -*(m_float*)REG(SZ_INT);
  *(m_float*)[01;31m[Kshred-[m[K>reg = *(m_int*)[01;31m[Kshred-[m[K>reg * *(m_float*)REG(SZ_INT);
  *(m_float*)[01;31m[Kshred-[m[K>reg = *(m_int*)[01;31m[Kshred-[m[K>reg / *(m_float*)REG(SZ_INT);
  *(m_int*)[01;31m[Kshred-[m[K>reg = (*(m_int*)[01;31m[Kshred-[m[K>reg && *(m_float*)REG(SZ_INT));
  *(m_int*)[01;31m[Kshred-[m[K>reg = (*(m_int*)[01;31m[Kshred-[m[K>reg || *(m_float*)REG(SZ_INT));
  *(m_int*)[01;31m[Kshred-[m[K>reg = (*(m_int*)[01;31m[Kshred-[m[K>reg == *(m_float*)REG(SZ_INT));
  *(m_int*)[01;31m[Kshred-[m[K>reg = (*(m_int*)[01;31m[Kshred-[m[K>reg != *(m_float*)REG(SZ_INT));
  *(m_int*)[01;31m[Kshred-[m[K>reg = (*(m_int*)[01;31m[Kshred-[m[K>reg > *(m_float*)REG(SZ_INT));
  *(m_int*)[01;31m[Kshred-[m[K>reg = (*(m_int*)[01;31m[Kshred-[m[K>reg >= *(m_float*)REG(SZ_INT));
  *(m_int*)[01;31m[Kshred-[m[K>reg = (*(m_int*)[01;31m[Kshred-[m[K>reg < * (m_float*)REG(SZ_INT));
  *(m_int*)[01;31m[Kshred-[m[K>reg = (*(m_int*)[01;31m[Kshred-[m[K>reg <= *(m_float*)REG(SZ_INT));
  *(m_float*)[01;31m[Kshred-[m[K>reg = (**(m_float**)REG(SZ_INT) = *(m_int*)[01;31m[Kshred-[m[K>reg);
  *(m_float*)REG(0) = (**(m_float**)REG(SZ_INT) += (*(m_int*)[01;31m[Kshred-[m[K>reg));
  *(m_float*)REG(0) = (**(m_float**)REG(SZ_INT) -= (*(m_int*)[01;31m[Kshred-[m[K>reg));
  *(m_float*)REG(0) = (**(m_float**)REG(SZ_INT) *= (*(m_int*)[01;31m[Kshred-[m[K>reg));
  *(m_float*)REG(0) = (**(m_float**)REG(SZ_INT) /= (*(m_float*)[01;31m[Kshred-[m[K>reg));
  *(m_float*)REG(0) = (**(m_float**)[01;31m[Kshred-[m[K>reg = *(m_int*)REG(SZ_INT));
  *(m_float*)[01;31m[Kshred-[m[K>reg += *(m_int*)REG(SZ_FLOAT);
  *(m_float*)[01;31m[Kshred-[m[K>reg -= *(m_int*)REG(SZ_FLOAT);
  *(m_float*)[01;31m[Kshred-[m[K>reg *= *(m_int*)REG(SZ_FLOAT);
  *(m_float*)[01;31m[Kshred-[m[K>reg /= *(m_int*)REG(SZ_FLOAT);
  *(m_int*)[01;31m[Kshred-[m[K>reg = (*(m_float*)[01;31m[Kshred-[m[K>reg && *(m_int*)REG(SZ_FLOAT));
  *(m_int*)[01;31m[Kshred-[m[K>reg = (*(m_float*)[01;31m[Kshred-[m[K>reg || *(m_int*)REG(SZ_FLOAT));
  *(m_int*)[01;31m[Kshred-[m[K>reg = (*(m_float*)[01;31m[Kshred-[m[K>reg == *(m_int*)REG(SZ_FLOAT));
  *(m_int*)[01;31m[Kshred-[m[K>reg = (*(m_float*)[01;31m[Kshred-[m[K>reg != *(m_int*)REG(SZ_FLOAT));
  *(m_int*)[01;31m[Kshred-[m[K>reg = (*(m_float*)[01;31m[Kshred-[m[K>reg > *(m_int*)REG(SZ_FLOAT));
  *(m_int*)[01;31m[Kshred-[m[K>reg = (*(m_int*)[01;31m[Kshred-[m[K>reg >= *(m_int*)REG(SZ_FLOAT));
  *(m_int*)[01;31m[Kshred-[m[K>reg = (*(m_float*)[01;31m[Kshred-[m[K>reg < * (m_int*)REG(SZ_FLOAT));
  *(m_int*)[01;31m[Kshred-[m[K>reg = (*(m_float*)[01;31m[Kshred-[m[K>reg <= *(m_int*)REG(SZ_FLOAT));
  **(m_int**)REG(SZ_FLOAT) = *(m_float*)[01;31m[Kshred-[m[K>reg;
  *(m_int*)[01;31m[Kshred-[m[K>reg = **(m_int**)REG(SZ_FLOAT);
  *(m_int*)REG(0) = (**(m_int**)REG(SZ_FLOAT) += (*(m_float*)[01;31m[Kshred-[m[K>reg));
  *(m_int*)REG(0) = (**(m_int**)REG(SZ_FLOAT) += (*(m_float*)[01;31m[Kshred-[m[K>reg));
  *(m_int*)REG(0) = (**(m_int**)REG(SZ_FLOAT) *= (*(m_float*)[01;31m[Kshred-[m[K>reg));
  *(m_int*)REG(0) = (**(m_int**)REG(SZ_FLOAT) /= (*(m_float*)[01;31m[Kshred-[m[K>reg));
float.c
  *(m_int*)REG(0) = (**(m_int**)[01;31m[Kshred-[m[K>reg = *(m_int*)REG(SZ_INT));
  *(m_int*)[01;31m[Kshred-[m[K>reg += *(m_int*)REG(SZ_INT);
  *(m_int*)[01;31m[Kshred-[m[K>reg -= *(m_int*)REG(SZ_INT);
  *(m_int*)[01;31m[Kshred-[m[K>reg *= *(m_int*)REG(SZ_INT);
  *(m_int*)[01;31m[Kshred-[m[K>reg /= *(m_int*)REG(SZ_INT);
  *(m_int*)[01;31m[Kshred-[m[K>reg %= *(m_int*)REG(SZ_INT);
  *(m_int*)[01;31m[Kshred-[m[K>reg = (*(m_int*)[01;31m[Kshred-[m[K>reg && *(m_int*)REG(SZ_INT));
  *(m_int*)[01;31m[Kshred-[m[K>reg = (*(m_int*)[01;31m[Kshred-[m[K>reg || *(m_int*)REG(SZ_INT));
  *(m_int*)[01;31m[Kshred-[m[K>reg = (*(m_int*)[01;31m[Kshred-[m[K>reg == *(m_int*)REG(SZ_INT));
  *(m_int*)[01;31m[Kshred-[m[K>reg = (*(m_int*)[01;31m[Kshred-[m[K>reg != *(m_int*)REG(SZ_INT));
  *(m_int*)[01;31m[Kshred-[m[K>reg = (*(m_int*)[01;31m[Kshred-[m[K>reg > *(m_int*)REG(SZ_INT));
  *(m_int*)[01;31m[Kshred-[m[K>reg = (*(m_int*)[01;31m[Kshred-[m[K>reg >= *(m_int*)REG(SZ_INT));
  *(m_int*)[01;31m[Kshred-[m[K>reg = (*(m_int*)[01;31m[Kshred-[m[K>reg < * (m_int*)REG(SZ_INT));
  *(m_int*)[01;31m[Kshred-[m[K>reg = (*(m_int**)[01;31m[Kshred-[m[K>reg <= *(m_int**)REG(SZ_INT));
  *(m_int*)[01;31m[Kshred-[m[K>reg = (*(m_int*)[01;31m[Kshred-[m[K>reg << * (m_int*)REG(SZ_INT));
  *(m_int*)[01;31m[Kshred-[m[K>reg = (*(m_int*)[01;31m[Kshred-[m[K>reg >> *(m_int*)REG(SZ_INT));
  *(m_int*)[01;31m[Kshred-[m[K>reg = (*(m_int*)[01;31m[Kshred-[m[K>reg & *(m_int*)REG(SZ_INT));
  *(m_int*)[01;31m[Kshred-[m[K>reg = (*(m_int*)[01;31m[Kshred-[m[K>reg | *(m_int*)REG(SZ_INT));
  *(m_int*)[01;31m[Kshred-[m[K>reg = (*(m_int*)[01;31m[Kshred-[m[K>reg ^ * (m_int*)REG(SZ_INT));
  *(m_int*)[01;31m[Kshred-[m[K>reg *= -1;
  *(m_int*)[01;31m[Kshred-[m[K>reg = !*(m_int*)[01;31m[Kshred-[m[K>reg;
  *(m_int*)([01;31m[Kshred-[m[K>reg - SZ_INT) = (++**(m_int**)([01;31m[Kshred-[m[K>reg - SZ_INT));
  *(m_int*)([01;31m[Kshred-[m[K>reg - SZ_INT) = (--**(m_int**)([01;31m[Kshred-[m[K>reg - SZ_INT));
  *(m_int*)([01;31m[Kshred-[m[K>reg - SZ_INT) = (**(m_int**)([01;31m[Kshred-[m[K>reg - SZ_INT))++;
  *(m_int*)([01;31m[Kshred-[m[K>reg - SZ_INT) = (**(m_int**)([01;31m[Kshred-[m[K>reg - SZ_INT))--;
  **(m_int**)REG(SZ_INT) = *(m_int*)[01;31m[Kshred-[m[K>reg;
  *(m_int*)REG(0) = (**(m_int**)REG(SZ_INT) += (*(m_int*)[01;31m[Kshred-[m[K>reg));
  *(m_int*)REG(0) = (**(m_int**)REG(SZ_INT) -= (*(m_int*)[01;31m[Kshred-[m[K>reg));
  *(m_int*)REG(0) = (**(m_int**)REG(SZ_INT) *= (*(m_int*)[01;31m[Kshred-[m[K>reg));
  *(m_int*)REG(0) = (**(m_int**)REG(SZ_INT) /= (*(m_int*)[01;31m[Kshred-[m[K>reg));
  *(m_int*)REG(0) = (**(m_int**)REG(SZ_INT) %= (*(m_int*)[01;31m[Kshred-[m[K>reg));
  *(m_int*)REG(0) = (**(m_int**)REG(SZ_INT) && (*(m_int*)[01;31m[Kshred-[m[K>reg));
  *(m_int*)REG(0) = (**(m_int**)REG(SZ_INT) || (*(m_int*)[01;31m[Kshred-[m[K>reg));
  *(m_int*)REG(0) = (**(m_int**)REG(SZ_INT) == (*(m_int*)[01;31m[Kshred-[m[K>reg));
  *(m_int*)REG(0) = (**(m_int**)REG(SZ_INT) != (*(m_int*)[01;31m[Kshred-[m[K>reg));
  *(m_int*)REG(0) = (**(m_int**)REG(SZ_INT) > (*(m_int*)[01;31m[Kshred-[m[K>reg));
  *(m_int*)REG(0) = (**(m_int**)REG(SZ_INT) >= (*(m_int*)[01;31m[Kshred-[m[K>reg));
  *(m_int*)REG(0) = (**(m_int**)REG(SZ_INT) < (*(m_int*)[01;31m[Kshred-[m[K>reg));
  *(m_int*)REG(0) = (**(m_int**)REG(SZ_INT) <= (*(m_int*)[01;31m[Kshred-[m[K>reg));
  *(m_int*)REG(0) = (**(m_int**)REG(SZ_INT) <<= (*(m_int*)[01;31m[Kshred-[m[K>reg));
  *(m_int*)REG(0) = (**(m_int**)REG(SZ_INT) >>= (*(m_int*)[01;31m[Kshred-[m[K>reg));
  *(m_int*)REG(0) = (**(m_int**)REG(SZ_INT) &= (*(m_int*)[01;31m[Kshred-[m[K>reg));
  *(m_int*)REG(0) = (**(m_int**)REG(SZ_INT) |= (*(m_int*)[01;31m[Kshred-[m[K>reg));
  *(m_int*)REG(0) = (**(m_int**)REG(SZ_INT) ^= (*(m_int*)[01;31m[Kshred-[m[K>reg));
int.c
  RETURN->d.v_uint = compile([01;31m[Kshred-[m[K>vm_ref, str);
  filename = randstring([01;31m[Kshred-[m[K>vm_ref, 12);
  if(type_engine_check_prog([01;31m[Kshred-[m[K>vm_ref->env, ast, s) < 0)
  filename = randstring([01;31m[Kshred-[m[K>vm_ref, 12);
  compile([01;31m[Kshred-[m[K>vm_ref, c);
  VM* vm = [01;31m[Kshred-[m[K>vm_ref;
  vector_add(&[01;31m[Kshred-[m[K>gc, (vtype)obj);
machine.c
          c, [01;31m[Kshred-[m[K>xid, [01;31m[Kshred-[m[K>name, [01;31m[Kshred-[m[K>pc);
  [01;31m[Kshred-[m[K>is_running = 0;
  [01;31m[Kshred-[m[K>is_done = 1;
    vector_add(&[01;31m[Kshred-[m[K>gc, (vtype)a);
          sh->me = new_shred([01;31m[Kshred-[m[K>vm_ref, sh);
          memcpy(sh->mem, [01;31m[Kshred-[m[K>mem, SIZEOF_MEM);
          vm_add_shred([01;31m[Kshred-[m[K>vm_ref, sh);
      *(m_uint*)([01;31m[Kshred-[m[K>reg - SZ_INT * 2), **(m_uint**)([01;31m[Kshred-[m[K>reg - SZ_INT));
  src = *(M_Object*)[01;31m[Kshred-[m[K>reg;
  m_uint* lhs = *(m_uint**)[01;31m[Kshred-[m[K>reg;
  *(m_uint*)[01;31m[Kshred-[m[K>reg = (lhs == rhs);
  m_uint* lhs = *(m_uint**)[01;31m[Kshred-[m[K>reg;
  *(m_uint*)[01;31m[Kshred-[m[K>reg = (lhs != rhs);
    [01;31m[Kshred-[m[K>next_pc = instr->m_val2 + 1;
  *(m_uint*)([01;31m[Kshred-[m[K>reg - SZ_INT) = 0;
    memcpy(arg->d, [01;31m[Kshred-[m[K>reg, instr->m_val);
  *(struct Vararg**)[01;31m[Kshred-[m[K>reg = arg;
    *(m_uint*)([01;31m[Kshred-[m[K>reg - SZ_INT) = 0;
    [01;31m[Kshred-[m[K>next_pc = instr->m_val2;
  *(m_uint*)[01;31m[Kshred-[m[K>reg = *(m_uint*)(arg->d + arg->o);
  *(m_float*)[01;31m[Kshred-[m[K>reg = *(m_float*)(arg->d + arg->o);
  *(m_complex*)[01;31m[Kshred-[m[K>reg = *(m_complex*)(arg->d + arg->o);
  *(M_Object*)[01;31m[Kshred-[m[K>reg = *(M_Object*)(arg->d + arg->o);
  *(m_vec3*)[01;31m[Kshred-[m[K>reg = *(m_vec3*)(arg->d + arg->o);
  *(m_vec4*)[01;31m[Kshred-[m[K>reg = *(m_vec4*)(arg->d + arg->o);
object.c
  for(i = 0; i < vector_size(&[01;31m[Kshred-[m[K>gc1); i++)
    release((M_Object)vector_at(&[01;31m[Kshred-[m[K>gc1, i), shred);
  Shreduler sh = [01;31m[Kshred-[m[K>vm_ref->shreduler;
  VM_Shred s = (VM_Shred)vector_at(&[01;31m[Kshred-[m[K>vm_ref->shred, *(m_uint*)MEM(SZ_INT) - 1);
    vector_add(&[01;31m[Kshred-[m[K>gc, (vtype) s->me);
shred.c
  RETURN->d.v_uint = sp_rand([01;31m[Kshred-[m[K>vm_ref->bbq->sp);
      RETURN->d.v_uint = min + (m_int)((1.0 + range) * (sp_rand([01;31m[Kshred-[m[K>vm_ref->bbq->sp) / (RAND_MAX + 1.0)));
      RETURN->d.v_uint = min - (m_int)((-range + 1.0) * (sp_rand([01;31m[Kshred-[m[K>vm_ref->bbq->sp) / (RAND_MAX + 1.0)));
  RETURN->d.v_float = 2.0 * sp_rand([01;31m[Kshred-[m[K>vm_ref->bbq->sp) / RAND_MAX - 1.0;
  RETURN->d.v_float = min + (max - min) * (sp_rand([01;31m[Kshred-[m[K>vm_ref->bbq->sp) / (m_float)RAND_MAX);
std.c
  M_Object lhs = *(M_Object*)[01;31m[Kshred-[m[K>reg;
  m_int lhs = *(m_int*)[01;31m[Kshred-[m[K>reg;
  *(M_Object*)[01;31m[Kshred-[m[K>reg = rhs;
  m_float lhs = *(m_float*)[01;31m[Kshred-[m[K>reg;
  *(M_Object*)[01;31m[Kshred-[m[K>reg = (M_Object)rhs;
  m_complex lhs = *(m_complex*)[01;31m[Kshred-[m[K>reg;
  *(M_Object*)[01;31m[Kshred-[m[K>reg = (M_Object)rhs;
  m_complex lhs = *(m_complex*)[01;31m[Kshred-[m[K>reg;
  *(M_Object*)[01;31m[Kshred-[m[K>reg = (M_Object)rhs;
  m_vec3 lhs = *(m_vec3*)[01;31m[Kshred-[m[K>reg;
  *(M_Object*)[01;31m[Kshred-[m[K>reg = (M_Object)rhs;
  m_vec4 lhs = *(m_vec4*)[01;31m[Kshred-[m[K>reg;
  *(M_Object*)[01;31m[Kshred-[m[K>reg = (M_Object)rhs;
  M_Object lhs = *(M_Object*)[01;31m[Kshred-[m[K>reg;
  *(M_Object*)[01;31m[Kshred-[m[K>reg = (M_Object)rhs;
  M_Object lhs = *(M_Object*)[01;31m[Kshred-[m[K>reg;
  *(M_Object*)[01;31m[Kshred-[m[K>reg = new_String(shred, str);
  m_int lhs = *(m_int*)[01;31m[Kshred-[m[K>reg;
  *(M_Object*)[01;31m[Kshred-[m[K>reg = new_String(shred,str);
  m_float lhs = *(m_float*)[01;31m[Kshred-[m[K>reg;
  *(M_Object*)[01;31m[Kshred-[m[K>reg = new_String(shred,str);
  m_complex  lhs = *(m_complex*)[01;31m[Kshred-[m[K>reg;
  *(M_Object*)[01;31m[Kshred-[m[K>reg = new_String(shred,str);
  m_complex  lhs = *(m_complex*)[01;31m[Kshred-[m[K>reg;
  *(M_Object*)[01;31m[Kshred-[m[K>reg = new_String(shred,str);
  m_vec3  lhs = *(m_vec3*)[01;31m[Kshred-[m[K>reg;
  *(M_Object*)[01;31m[Kshred-[m[K>reg = new_String(shred, str);
  m_vec4  lhs = *(m_vec4*)[01;31m[Kshred-[m[K>reg;
  *(M_Object*)[01;31m[Kshred-[m[K>reg = new_String(shred, str);
  M_Object lhs = *(M_Object*)[01;31m[Kshred-[m[K>reg;
  *(M_Object*)[01;31m[Kshred-[m[K>reg = new_String(shred,str);
  M_Object lhs = *(M_Object*)[01;31m[Kshred-[m[K>reg;
    *(M_Object*)[01;31m[Kshred-[m[K>reg = rhs;
  *(M_Object*)[01;31m[Kshred-[m[K>reg = rhs;
  m_int lhs = *(m_int*)[01;31m[Kshred-[m[K>reg;
  *(M_Object*)[01;31m[Kshred-[m[K>reg = rhs;
  m_float lhs = *(m_float*)[01;31m[Kshred-[m[K>reg;
  *(M_Object*)[01;31m[Kshred-[m[K>reg = rhs;
  m_float lhs = *(m_float*)[01;31m[Kshred-[m[K>reg;
  *(M_Object*)[01;31m[Kshred-[m[K>reg = rhs;
  m_float lhs = *(m_float*)[01;31m[Kshred-[m[K>reg;
  *(M_Object*)[01;31m[Kshred-[m[K>reg = rhs;
  m_vec3 lhs = *(m_vec3*)[01;31m[Kshred-[m[K>reg;
  *(M_Object*)[01;31m[Kshred-[m[K>reg = rhs;
  m_vec4 lhs = *(m_vec4*)[01;31m[Kshred-[m[K>reg;
  *(M_Object*)[01;31m[Kshred-[m[K>reg = rhs;
  M_Object lhs = *(M_Object*)[01;31m[Kshred-[m[K>reg;
  *(M_Object*)[01;31m[Kshred-[m[K>reg = rhs;
  *(M_Object*)[01;31m[Kshred-[m[K>reg = new_String(shred,(m_str)instr->m_val);
string.c
  debug_msg("instr", "ugen connect %p %p", *(m_uint*)([01;31m[Kshred-[m[K>reg - SZ_INT * 2), *(m_uint*)([01;31m[Kshred-[m[K>reg - SZ_INT));
  M_Object lhs = *(M_Object*)[01;31m[Kshred-[m[K>reg;
  *(M_Object*)[01;31m[Kshred-[m[K>reg = rhs;
  debug_msg("instr", "ugen connect %p %p", *(m_uint*)([01;31m[Kshred-[m[K>reg - SZ_INT * 2), *(m_uint*)([01;31m[Kshred-[m[K>reg - SZ_INT));
  M_Object lhs = *(M_Object*)[01;31m[Kshred-[m[K>reg;
  *(M_Object*)[01;31m[Kshred-[m[K>reg = rhs;
  debug_msg("instr", "trig connect %p %p", *(m_uint*)([01;31m[Kshred-[m[K>reg - SZ_INT * 2), *(m_uint*)([01;31m[Kshred-[m[K>reg - SZ_INT));
  M_Object lhs = *(M_Object*)[01;31m[Kshred-[m[K>reg;
  *(M_Object*)[01;31m[Kshred-[m[K>reg = rhs;
  debug_msg("instr", "trig discconnect %p %p", *(m_uint*)([01;31m[Kshred-[m[K>reg - SZ_INT * 2), *(m_uint*)([01;31m[Kshred-[m[K>reg - SZ_INT));
  M_Object lhs = *(M_Object*)[01;31m[Kshred-[m[K>reg;
  *(M_Object*)[01;31m[Kshred-[m[K>reg = rhs;
  vector_add(&[01;31m[Kshred-[m[K>vm_ref->ugen, (vtype)o->ugen);
  m_int j = vector_find(&[01;31m[Kshred-[m[K>vm_ref->ugen, (vtype)ug);
    vector_rem(&[01;31m[Kshred-[m[K>vm_ref->ugen, j);
ugen.c
  v->x = (v->y - v->x) * v->z * (*(m_float*)MEM(SZ_INT) / [01;31m[Kshred-[m[K>vm_ref->bbq->sp->sr) + v->x;
  m_vec3 r, * t = (m_vec3*)[01;31m[Kshred-[m[K>reg;
  *(m_float*)[01;31m[Kshred-[m[K>reg = r.x;
  *(m_float*)[01;31m[Kshred-[m[K>reg = r.y;
  *(m_float*)[01;31m[Kshred-[m[K>reg = r.z;
  m_vec3 r, * t = (m_vec3*)[01;31m[Kshred-[m[K>reg;
  *(m_float*)[01;31m[Kshred-[m[K>reg = r.x;
  *(m_float*)[01;31m[Kshred-[m[K>reg = r.y;
  *(m_float*)[01;31m[Kshred-[m[K>reg = r.z;
  m_vec3 r, * t = (m_vec3*)[01;31m[Kshred-[m[K>reg;
  *(m_float*)[01;31m[Kshred-[m[K>reg = r.x;
  *(m_float*)[01;31m[Kshred-[m[K>reg = r.y;
  *(m_float*)[01;31m[Kshred-[m[K>reg = r.z;
  *(m_float*)[01;31m[Kshred-[m[K>reg = r.x;
  *(m_float*)[01;31m[Kshred-[m[K>reg = r.y;
  *(m_float*)[01;31m[Kshred-[m[K>reg = r.z;
  *(m_float*)[01;31m[Kshred-[m[K>reg = r.x;
  *(m_float*)[01;31m[Kshred-[m[K>reg = r.y;
  *(m_float*)[01;31m[Kshred-[m[K>reg = r.z;
  *(m_float*)[01;31m[Kshred-[m[K>reg = r.x;
  *(m_float*)[01;31m[Kshred-[m[K>reg = r.y;
  *(m_float*)[01;31m[Kshred-[m[K>reg = r.z;
  *(m_vec3*)[01;31m[Kshred-[m[K>reg = *r;
    *(m_float**)[01;31m[Kshred-[m[K>reg = &v->x;
    *(m_float*)[01;31m[Kshred-[m[K>reg = v->x;
    *(m_float**)[01;31m[Kshred-[m[K>reg = &v->y;
    *(m_float*)[01;31m[Kshred-[m[K>reg = v->y;
    *(m_float**)[01;31m[Kshred-[m[K>reg = &v->z;
    *(m_float*)[01;31m[Kshred-[m[K>reg = v->z;
    *(m_float**)[01;31m[Kshred-[m[K>reg = &v->x;
    *(m_float*)[01;31m[Kshred-[m[K>reg = v->x;
    *(m_float**)[01;31m[Kshred-[m[K>reg = &v->y;
    *(m_float*)[01;31m[Kshred-[m[K>reg = v->y;
    *(m_float**)[01;31m[Kshred-[m[K>reg = &v->z;
    *(m_float*)[01;31m[Kshred-[m[K>reg = v->z;
    *(m_float**)[01;31m[Kshred-[m[K>reg = &v->w;
    *(m_float*)[01;31m[Kshred-[m[K>reg = v->w;
  m_vec4 r, * t = (m_vec4*)[01;31m[Kshred-[m[K>reg;
  *(m_float*)[01;31m[Kshred-[m[K>reg = r.x;
  *(m_float*)[01;31m[Kshred-[m[K>reg = r.y;
  *(m_float*)[01;31m[Kshred-[m[K>reg = r.z;
  *(m_float*)[01;31m[Kshred-[m[K>reg = r.w;
  m_vec4 r, * t = (m_vec4*)[01;31m[Kshred-[m[K>reg;
  *(m_float*)[01;31m[Kshred-[m[K>reg = r.x;
  *(m_float*)[01;31m[Kshred-[m[K>reg = r.y;
  *(m_float*)[01;31m[Kshred-[m[K>reg = r.z;
  *(m_float*)[01;31m[Kshred-[m[K>reg = r.w;
  m_vec4 r, * t = (m_vec4*)[01;31m[Kshred-[m[K>reg;
  *(m_float*)[01;31m[Kshred-[m[K>reg = r.x;
  *(m_float*)[01;31m[Kshred-[m[K>reg = r.y;
  *(m_float*)[01;31m[Kshred-[m[K>reg = r.z;
  *(m_float*)[01;31m[Kshred-[m[K>reg = r.w;
  *(m_float*)[01;31m[Kshred-[m[K>reg = r.x;
  *(m_float*)[01;31m[Kshred-[m[K>reg = r.y;
  *(m_float*)[01;31m[Kshred-[m[K>reg = r.z;
  *(m_float*)[01;31m[Kshred-[m[K>reg = r.w;
  *(m_float*)[01;31m[Kshred-[m[K>reg = r.x;
  *(m_float*)[01;31m[Kshred-[m[K>reg = r.y;
  *(m_float*)[01;31m[Kshred-[m[K>reg = r.z;
  *(m_float*)[01;31m[Kshred-[m[K>reg = r.w;
  *(m_float*)[01;31m[Kshred-[m[K>reg = r.x;
  *(m_float*)[01;31m[Kshred-[m[K>reg = r.y;
  *(m_float*)[01;31m[Kshred-[m[K>reg = r.z;
  *(m_float*)[01;31m[Kshred-[m[K>reg = r.w;
  *(m_vec4*)[01;31m[Kshred-[m[K>reg = *r;
vec.c
